namespace Chapter7ArraysandLists
{
    class main
    {
        static void Main(string[] args)
        {

        }
    }
}

/* /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 *				    Chapter 7 Arrays and Lists
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *                          Topics
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 7.1 Value Types and Reference Types
 * 
 * 7.2 Array Basics
 * 
 * 7.3 Working with Files and Arrays
 * 
 * 7.4 Passing Arrays as Arguments to Methods
 * 
 * 7.5 Some Useful Array Alogrithms
 * 
 * 7.6 Advanced Algorithms for Sorting and Searching Arrays
 * 
 * 7.7 Two-Dimensional Arrays
 * 
 * 7.8 Jagged Arrays
 * 
 * 7.9 The List Collection
 * 
 * 7.10 The ImageList Control
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 7.1 Value Types and Reference Types
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
///Concept The data types in C# and the .NET Framework fall into
///two categories: value types and reference types.
/////////////////////////////////////////////////////////////////////
///
/////////////////////////////////////////////////////////////////////
///In this chapter, you will gain more experience working with objects.
///Specifically, you will work with arrays and collectons, which are 
///objects that store groups of data. Before we go into the details of 
///creating and working with those objects, it will be helpful for you
///to understand how objects are stored in memory. In this section, we
///discuss the ways that different types of objects are internally stored
///in memory. In this section, we discuss the ways that different types 
///of objects are internally stored bt the .NET Framework. As a result, 
///you will better understand the concepts persented in this chapter, and
///chapters to come.
///////////////////////////////////////////////////////////////////////
///
/// //////////////////////////////////////////////////////////////////
/// All the data types in C#- and the underlying .NET Framework-fall 
/// into categories: value types and reference types. Of the C# data
/// types that you have used so far, the following data types: int,
/// double, decimal, bool. (There are other value types in addition to
/// these, but these are the ones we focus on in this book.)
 * ////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * When you declare a value type variable, the compiler sets aside, or 
 * allocates, a chunk of memory that is big enough for that variable.
 * For example, look at the following variable declarations:
 * /////////////////////////////////////////////////////////////////////
 * 
 * ////////////////////////////////////////////////////////////////////
 * int wholeNumber;
 * double realNumber;
 * decimal moneyNumber;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Rec
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-1 Memory allocated
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The memory that is allocated for a value type variable is the actual
 * location that will hold any value that is assigned to that variable.
 * For example, suppose we use the following statements to addign values
 * to the variables shown in Figure 7-1.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * wholeNumber = 99;
 * realNumber = 123.45;
 * moneyNumber = 800.0m;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-2 shows how the assigned values are stored in each variabl's
 * memory location.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-2 Values assigned to the variables
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * As you can see from these illustrations, value types are very 
 * straightforward. When you are working with a value type, you are
 * using a variable that holds a piece of data.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This is different from the way that reference types works. When you
 * are working with a reference type, you are using two things:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *An object that is created in memory
 * 
 * *A variable that references the object
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The object that is created in memory holds data of some sort and 
 * perform operations of some sort. (Exactly what the data and operations
 * are depends on what kind of object it is.) In order to work with the 
 * object in code, you need some way to refer to it. That's where the 
 * variable comes in.
 * The variable does not hold an actual piece of data with which your 
 * program will work. instead, it holds a special value know as a reference
 * , which links the variable to the object^1. When you want tot work with
 * the object, you use the variable that references it. 
 * /////////////////////////////////////////////////////////////////////
 * 1 A fererence is similar to a memory address. It is a value that 
 * identifies the object's memeory location.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * A variable that is used to reference an object is commonly called a 
 * reference variable. Reference variables can be used only to reference
 * objects. Figure 7-3 illustrates two obejcts that have been created in 
 * memory, each referenced by a variable.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-3 Two objects referenced by variables
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * To understand how reference variables and objects work together, think
 * about flying a kite. In order to fly a kite, you need a spool of string 
 * attached to it. WHen the kite is airborne, you use the spool of string
 * to hold onto the kite and control it. This is similar to the relationship
 * between an object and the variable that references the object. AS shown
 * in Figure 7-4, the object is like the kite, and the variable that references
 * the object is like the spool of string.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-4 The kite and string metaphor
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Creating a reference type object typically requires the following 
 * two steps:
 * 
 * 1. You deaclare a reference variable.
 * 2. You create the object and associate it with the reference variable.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * After you have performed these steps, you can use the reference variable
 * to work with the object. Let's look at an example that you have already
 * learned about: creating objects of the Random calss. Recall from Chapter 5
 * that the Random class allows your program to generate random numbers. 
 * Here is an example of how you create an object from the Random class:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Random rand = new Random();
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * LEt's look at the differenc parts of this statement:
 * 
 * *The first part of the statement, appearing on the left side of the
 * = operator, reads Random rand. This declares variable named rand that
 * can be used to reference an object of the Random type.
 * 
 * *The second part of the statement, appearing on the right side of the 
 * object. So, the expression new Random() creates an object from the 
 * Random class and returns a reference to that object.
 * 
 * *THe = operator assigns the reference that was returned from the new
 * operator to the rand variable.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * After this statemet executes, the rand variable references a Random
 * object, as shown in Figure 7-5. The rand variable can then be used to
 * perform operations with the object, sucj as generating random numbers.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-5 The rand variable referencing a Random object.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 *                           7.4 Array Basics
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Concept: An array allows you to store a group of items of the same 
 * data type together in memory. Processing a large number of items in an
 * array is usually easier than processing a large number of items stored
 * in separate variables.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In the programs you have written so far, you have used variables to
 * store data in memory. The simplest way to store a value in memory is 
 * to store it in a variable. Variables work well in many sutuations, but
 * they have limitations. For example, they can hold only one value at a 
 * time. Considfer the following variable declaraion:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * int number = 99;
 * /////////////////////////////////////////////////////////////////////
 * 
 * ////////////////////////////////////////////////////////////////////
 * This statement declares an int variable named number, initialized with
 * the value 99. Consider what happends if the following statement 
 * appears later in the program:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * number = 5;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This statement assigns the value 5 to number, replacing the value 99
 * that was previously stored there. 
 * Because number is an ordinaty (???) variable, it can hold only value at
 * a time.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Because variables hold only a single value, they can be cumbersome in
 * process lists of data. For example, suppose you are asked to write a
 * program that holds the names of 50 employees. image declaring 50 
 * variables to hold all those names:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * string employee1;
 * string employee2;
 * string employee3;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * and so forth...
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * string employee50
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Then, imagine writing the code to process all 50 names. For example,
 * if you wanted to display the contents of the variables in a ListBox,
 * you would write code such as this:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * employeeListBox.Items.Add(employee1);    // Display employee 1
 * employeeListBox.Items.Add(employee2);    // Display employee 2
 * employeeListBox.Items.Add(employee3);    // Display employee 3
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * and so forth...
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * emplyeeListBox.Items.Add(emplyee50); // Display emplyee 50
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * As you can see, variables are not well suited for storing and processing
 * lists of data. Each variable is a seperate item that must be declared and
 * individually processed.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Fortunately, you can use an array as an alternative to group of
 * variables. An array is an object that can hold a group of values that
 * are all the same data type. You can have an array of int values, an 
 * array of double values, and array of decimal values, or an array of 
 * string values, but you cannot store a muxture of data types in an
 * array. Once you create an array, you can write simplea and efficient
 * code to process the values that are stored in it.
 * /////////////////////////////////////////////////////////////////////
 * 
 * ////////////////////////////////////////////////////////////////////
 * Arrays are reference type objects. Recall from Section 7.1 that two
 * steps are required to create an use a reference type object:
 * 
 * 1. You delcare a reference variable.
 * 
 * 2. You create the object and associate it with the reference variable.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Suppose you want to create an array that can hold int values. Here is
 * an example of how you might declare a reference variable for the array:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * int[] numbersArray;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This statement declares a reference variable named numbersArray. Notice
 * that this statement looks like a regulat int variable declaration except
 * for the set of brackets ([]) that appear after the keyword int. The
 * expression int[] indicates that this cariable is a reference to an int
 * array. So, we cannot use this variable to store an int value. Rather, we
 * can use it to reference ant int array.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The next step in the process is to create the array object ans associate
 * it the the numbersArray variable. The following statemenet shows an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * numbersArray = new int[6];
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * As previously mentioned, the new keyword creates an object in memory.
 * The expression that appers after the new keyword specified what type
 * of object to create. In this case, the expression int[6] specifies that
 * the object should be an array large enough to hold six int values. The
 * number inside the brackets is the array's size declarator. It indicates
 * the number of values that the array should be able to hold.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The new keyword also returns a reference to the object that it creates.
 * In the previously shown statement, the new keyword creates an int array
 * and returns a refenece tp that array. The = operator assigns the references
 * to numbersAray variable. After this statement executes, the numbersArray variable will reference an int array that can hold six values. This is shown in Figure 7-6.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-6 The numbers
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In the prevoise examplem we used two statement to (10 decare a reference
 * variable ans (2) create an array object. These two steps can be combined 
 * into one statement, as shown here:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * int[] numbersArray = new int[6];
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * You can create arrays of any data. The following are all valid array
 * declarartions:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * duble[] temperatures = new double[100];
 * decimal[] prices = new decimal[50];
 * string[] nameArray = new string[1200];
 * /////////////////////////////////////////////////////////////////////
 * 
 * 
 * ////////////////////////////////////////////////////////////////////
 * An array's size declarator must be a nonnegative interger expression,
 * It can be a literal value, as shown in the previous examples, or a
 * variable. It is preferred practice to use a named constant as a size
 * declarator, however, Here is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * const int SIZE = 6;
 * int[] numberArray = new int[SIZE];
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This practice can make programs easier to maintain. As you see later 
 * in this chapter, many array-processing techniques require you to refer
 * to the array's size. When you use a named constant as an array's size 
 * declator, you can use the constant to refer to the size of the arrays
 * size. When you use a named constant as an array's sizr declarator, you
 * can use the constant to refer to the size of the array in your algorithms.
 * If you ever need ot modify the program so the array is a different size,
 * you need only change the value of the named constant.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Array Elements and Subscripts
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The storage location in an array are known as elements. In memory, an 
 * array's elements are located in consecutive memory locations. Each
 * element in an array is assigned a unique number know as a subscript.
 * Subcripts are used to identify specific elements in an array. The 
 * first element is assigned the subscript 0, the second element is 
 * assigned the subscript 1, and so forth. For example, suppose a prgram 
 * has the following seclarations:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * const int SIZE = 5;
 * int[] numbersArray = new int [SIZE];
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * As shown in Figure 7-7, the array referenced by numbersArray has five
 * elements. The elements are assigned the subscripts 0-4.
 * (Because subscript numbering starys at 0, the subscript of the last 
 * element in an array is 1 less than the total number of elements in
 * the array.)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-7 Array subscripts
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Array Element Default Values
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Notice that Figure 7-7 shows each element of the array containing the
 * value 0. When you create a numeric array in C#, its elements are set
 * to the value 0 by default.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Remember, you can create an array to hold any type of value. It is 
 * possible to create an array of reference type object. If you create an
 * array of reference type object, each element of the array acts as a
 * reference variable. By default, the elements of an array of reference
 * type objectss are set to the special value null. The value null indicates
 * that a reference variable is not set to a valid object and cannot be used for 
 * any meaningful purpose.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Note: As you will see in Chapter 8, strings are actully reference
 * types, so the default value of a string array's elements is null.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Working with Array Elements
 * /////////////////////////////////////////////////////////////////////
 * 
 * ////////////////////////////////////////////////////////////////////
 * You access the individual elements in an array by using their subscripts
 * . For example, the following code creates an int array with five elements
 * and assigns values to each of its elemets.
 * * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * const int SIZE = 5;
 * int[] numbersArray = new int[SIZE];
 * numbersArray[0] = 20;
 * numbersArray[1] = 30;
 * numbersArray[2] = 40;
 * numbersArray[3] = 50;
 * numbersArray[4] = 60;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The code assings the value 20 to element 0, the value 30 to element 1
 * , and so forth. Figure 7-8 shows the contents of the array after these
 * statements execute.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-8 Values assigned to each element
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Note: The expression numbersArray[0] is pronounced "numbersArray sub
 * zero."
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following code shows another example. It creates a string array with
 * three elements and assigns strings to each of its elements.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * const int SIZE = 3;
 * string[] names = new string[SIZE];
 * names[0] = "Chris";
 * names[1] = "Laurie";
 * names[2] = "Joe";
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following code sample shows how values can be assigned from TextBox
 * controls to array elements. Assusmen that an applicaior's form has 
 * three TextBox controls named amount1TextBox, amount2TextBox, and 
 * amount3TextBox and that the user has entered a numeric value into
 * each one. The following code creates a decimal array named amounts and
 * assigns each of the TextBox control's input value to an array element.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * const int SIZE = 3;
 * decimal[] amounts = new decimal[SIZE];
 * amounts[0] = decimal.Parse(amount1TextBox.Text);
 * amounts[1] = decimal.Parse(amount1TextBox.Text);
 * amounts[2] = decimal.Parse(amount1TextBox.Text);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Let's look at a complete program that demonstrates how to assign values
 * to an array and then display the values in the array. In the Chap07
 * folder of this book's Student Sample Program, you will find a prject named 
 * Display Elements. Figure 7-9 shows the application's form.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 7-9 The Display Elements application's form
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Here is the code for the getNameButton_Click event handler
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * private void getNamesButton_Click(object sender, e)
 * {
 *      // Create an array to hold strings.
 *      const int SIZE = 3;
 *      string[] names = new string[SIZE];
 *      
 *      // Get the names.
 *      
 *      names[0] = name1TextBox.Text;
 *      names[1] = name1TextBox.Text;
 *      names[2] = name1TextBox.Text;
 *      
 *      // Display the names.
 *      MessageBox.Show(names[0]);
 *      MessageBox.Show(names[1]);
 *      MessageBox.Show(names[2]);
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * ////////////////////////////////////////////////////////////////////
 * Run the applicaiton, enter a name into the TextBox controls, and then
 * click the Get Names button. The following actions take place:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *In line 5, an array to hold three strings is created.
 * 
 * *In lines 8-10, the names that you entered into the TextBox controls are
 * assigned to the array elements.
 * 
 * *In lines 13-15, each element of the arrayis displayed in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The Display Elements application displays the contents of a string
 * array. Because the array's elements are strings, we can pass each
 * element directly to the MessageBox.Show method without performing a date
 * type conversion. If you want to pass a numeric array element to the
 * MessageBox.Show method, however, you will have to call the element
 * , you will have to call the elment's ToString method. The following
 * code sample demonstrates: 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  // Create an array to hold three interger.
 *  const int SIZE = 3;
 *  int[] myValues = new int [SIZE];
 *  
 *  // Assign some value to the array elements
 *  
 *  myValues[0] = 10;
 *  myValues[1] = 20;
 *  myValues[2] - 30;
 *  
 *  // Display the array elements.
 *  MessageBox.Show(myValues[0].ToString());
 *  MessageBox.Show(myValues[1].ToString());
 *  MessageBox.Show(myValues[2].ToString());
 *  
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Array Initialization
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * WHen you create an array, you can optionally initialize it with a group
 * of values. Here is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Const int SIZE = 5;
 * int[] numberArray = new int [SIZE]{10,20,30,40,50};
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The series of values inside the braces and separated with commas is 
 * called an initialization list. These values are stored in the array
 * elements in the order they appear in the list. (The first value, 10, is
 * stored in numbersArray[0], the second value, 20, is stored in numbersArray[i], and so forth.))
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * When you provide an initializzation list , the size delcararion can 
 * be left out. The compiler determines the size of the array from the 
 * number of items in the initialization list. Here is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * int[] numbersArray = new int[] {10,20,30,40,50};
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In this example, the compiler determines that the array should have
 * five values appear in the initialization list. You can also leave out
 * the new operator and its subsequent experssion when an initializaiton
 * list is provided. Here is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * int[] numberArray = {10,20,30,40,50};
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Here are three separate examples that declare and initialize a string 
 * array named days. Each of these examples result in the same array:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  // Example 1
 *  const int SIZE = 7;
 *  string[] days = new string[SIZE] = {"Sunday","Monday",
 *  "Tuesday","Wednesday","Thursday", "Firday", "Saturday"};
 *  
 *  // Example 2
 *  string[] days = new string[] = {"Sunday","Monday",
 * "Tuesday","Wednesday","Thursday","Firday", "Saturday"};
 * 
 *  // Example 3
 *  string[] days ={"Sunday","Monday","Tuesday",
 *                  "Wendesday","Thursday","Firday"
 *                  "Saturday"};
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Using a Loop to Step through an Array
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * You can store a number in an int variable and then use that variable
 * as a subscript. This makes it possible to use a loop to step through
 * an array, performing the same operation on each element. For example,
 * look at the following code sample:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  // Create an array to hold three integers.
 *  
 *  const int SIZE = 3;
 *  int[] myValues = new int[SIZE];
 *  
 *  // Assign 99 to array element.
 *  for(int index = 0; index < SIZE; index++)
 *  {
 *      myValues[index] = 99;
 *  }
 * /////////////////////////////////////////////////////////////////////
 *  
 * /////////////////////////////////////////////////////////////////////
 * Line 3 creates an int array named myValues with three elements. THe
 * for loop that starts in line 6 uses an int variable named index as
 * its counter. The index variable is initialized with the value 0 and 
 * is incremented after each loop iteration. The loop iterates as long
 * as index is less than 3. So, the loop will iterate three times. As
 * it iterates, the index variable is assigned the values 0,1, and 2.
 * /////////////////////////////////////////////////////////////////////
 *  
 * /////////////////////////////////////////////////////////////////////
 * Inside the loop, the statement in line 8 assigns the value 99 to an
 * array element, using the index variable as the subscript. This is what
 * happens as the loop iterates:
 * 
 * * The first time thje loop iterates, index is set to 0, as 99 is assigned to myValues[0].
 * 
 * * The second time the loop iterates, index is set to 1, so 99 is assigned to myValue[1].
 * 
 * * The first time the loop iterates, index is set to 2, so 99 is assigned to myValues[2].
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  Invalid Subscripts
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  When working with an array, it is important that you do not use an 
 *  invalid subscript. You cannot use a subscript that is less than 0
 *  or greater than the size of the array minus 1. For example, suppose
 *  an array has 100 elements. The valid subscripts for the array are the
 *  integers 0 through 99. If you try to use any value outside this range,
 *  an exception, will be thrown at runtime. The following code sample
 *  decmonstrates how a loop that is not carfully written can cause such an
 *  exception to be thrown:
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  // Create an array to hold three integers.
 *  const int SIZE = 3;
 *  int[] myvalues = new int[SIZE];
 *  
 *  // Will this loop cause an exception?
 *  for(int index = 0; index <= SIZE; index++)
 *  {
 *      myValue[index] = 99;
 *  }
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  Notice that the for loop iterates as long as index is less than or
 *  equal to 3. During the loop's last iteration, indexis set to 3, so the 
 *  statement in line 8 attempts to make an assignment to myValues[3]. There
 *  is no element in the array with the subscript 3, so an exception will
 *  be thrown.
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  The Length Property
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  In C#, all arrays have Length property that is set to the number of 
 *  elements in the array. For example, consider an array created by the 
 *  following statemet:
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  double[] temperatures = new double[25];
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  The temperatures array's Length property will be set to 25. If we 
 *  executed the following statemet, it would display the message 
 *  "The temperatures array has 25 elements"
 *  /////////////////////////////////////////////////////////////////////
 *
 * /////////////////////////////////////////////////////////////////////
 * MessageBox.Show("The temperatures array has " + temperatures.Length
 * + " elements.");
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  The LEngth property can be useful when processing the entire contents 
 *  of an array with a loop. The subscript of the last element is always
 *  1 less than the array's Length property. Here is an example:
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  for(int index = 0; index < temperatures.Length; index++)
 *  {
 *      MessageBox.Show(temperatures[index].ToString());  
 *  }
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  Note: An array's Length property is read only, so you cannot change its
 *  value.
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  In Tutorial 7-1, you complete an application that generates a set of 
 *  random numbers similar to those used in lotteries. The numbers will be
 *  stored in an array.
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  Tutorial 7-1: Using an Array to Hold a List of Random Lottery Numbers
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  In this tutorial, you complete an application that randomly generates
 *  lottery numbers. The application's form is shown in Figure 7-10. When
 *  the Generate Numbers button is clicked, the application will generate
 *  five two-digit integer numbers and store them in an array. The contents
 *  of the array will then be displayed in Label controls
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  Figure 7-10 The Lottery Numbers application's form
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  Step 1: Start Visual Studio. Open the project named Lottery Numbers in
 *  the Chapt07 folder of this book's Student Sample Programs.
 *  
 *  Step 2: Open the Form1 form in the Designer, Double-click the
 *  generateButton control. This will open the code editor, and you will
 *  see an empty event handler named generateButton_Click. Complete the
 *  generateButton_Click event handler by typing the code shown in lines
 *  22-41 in Program 7-1. Let's take a closer look at the code:
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////

* /////////////////////////////////////////////////////////////////////
 * 
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  * /////////////////////////////////////////////////////////////////////
 * 
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  * /////////////////////////////////////////////////////////////////////
 * 
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  * /////////////////////////////////////////////////////////////////////
 * 
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  * /////////////////////////////////////////////////////////////////////
 * 
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  * /////////////////////////////////////////////////////////////////////
 * 
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  /////////////////////////////////////////////////////////////////////
 *  
 *  