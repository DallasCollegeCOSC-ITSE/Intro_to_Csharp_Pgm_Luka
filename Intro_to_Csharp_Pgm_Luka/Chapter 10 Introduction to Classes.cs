/*
 * //////////////////////////////////////////////////////////////////////////
 *                  Chapter 10 Introduction to Classes
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 *                               Topics
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 *      * 10.1 Introduction to Classes
 *      * 10.2 Properties
 *      * 10.3 Parameterized Constructors and Overloading
 *      * 10.4 Storing Class Type Objects in Arrays and Lists s
 *      * 10.5 Finding the Classes and Their Responsibilities in a Problem
 *      * 10.6 Application of Classes: Creating multiple Forms in a Project.
 *      * 10.7 Static Methods
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 *  10.1 Introduction to Classes
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Concept: A class is the blueprint for an object. IT specifies the fields
 * and methods a partivular type of object has. Form the class, one or more
 * objects may be created.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * As you have works through this book, you have used objects extensively in 
 * all the programs that you have written. Some object, such as the controls
 * that you place on a form, are visual. 
 * 
 * Other objects, such as Random objects, arrays, List objects, and ImageList
 * controls, cannot be seen on the screen but exist in memory and perform
 * important tasks.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * We mentioned in Chap 1 that objs do not just magically appear in your 
 * program. Before a specific type of object can be used, that object has to 
 * be created in memory. And, before an object can be created in memory, you
 * must have a class for the object.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * A class is code that describes a particular type of object. IT specifies
 * the data that an object can hold (fields and properties) and the actions
 * that an object can perform (methods). You can think of a class as a Code
 * "blueprint" that can be used to create a particular type of object. It
 * servers a similar purpose as the blueprint for a house.
 * The blueprint itself is not a house but is detailed description of a 
 * house. When we use it to build an actual house, we could say we are
 * buliding an instance of the house described by the buleprint. This 
 * idea is illustrated in Figure 10-1.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 *            Figure 10-1 A blueprint and house built from it.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * So, a clss is not an object but a description of an object.
 * When the program is running, it can use the class to create, in memory,
 * as many objects of a specific type as needed. Each object that is created 
 * from a class is called an instance of the class.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * For example, Jessica is an entomologist(someone who studies insects),
 * and she also enjoys writing computer programs. She designs a program to
 * catalog different types of insects. As part of the program, she creates
 * a class named Insect, which specifies fields, properties, and methods for
 * holding and manipualing data common to all types of insects. The Insect
 * class is not object but a specification that objects may be created from.
 * Next, she writes programming statements that create housefly object, which
 * is an instance of the Insect class. The housefly object is an entity that
 * occupies computer memory and stores data about a housefly.
 * It has the fields, properties, and methods specified by the Insect class.
 * Then she writes programming statements that createa mosquite object. THe 
 * mosquito about is also an instance of the Insect class. It has it own 
 * area in memory and stores data about a mosquito. Although the housefly and
 * mosquito objects are two separate entities in the computer's memory, they
 * were both created from the Insect class. This means that each object has
 * fields, properties, and methods described by the Insect class.
 * This is illustrated in Figure 10-2
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-2 The housefly and mosquito objects as instances of the Insect
 * class.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Creating a Class
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * You create a clss by writing a class declaration.
 * This is the general format of a class declaration:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * class ClassName
 * {
 *      Member declarations go here...
 * }
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * The first line of a class declaration is known as the class header.
 * It starts with the word class, followed bu the name of the class. The
 * same rules for naming variables apply to naming classes. Most programmers
 * follow the convention of beginning class names with an uppercase letter.
 * This helps to easily distinguish class names from variable names when
 * reading code.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Following the class header is an opening curly brace.
 * Next, you write the class's member declarations. These are statements that
 * define the class's fields, properties, and methods. A closing curly brace
 * appears at the end of the class declaration.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Let's look at a simple example. Suppose we are writing a program to
 * simulate the tossing of a coin. In the program, we need to repeatly toss
 * a coin and each time determine whether it landed heads up or tails up.
 * First, we write a class named Coin that can perform the behaviors of the
 * coin. The following code sample shows the Coin class.
 * (Note that this class is only part of the application's code.
 * In a moment, you will see where it should appear in the project,
 * but for now, we concentrate only on this class.)
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * class Coin
 * {
 *  // Field to represent the side facing up;
 *  private string sideUp;
 *  
 *  // Constructor
 *  public Coin()
 *  {
 *      side = "Heads";
 *  }
 *  
 *  // the toss method simulates tossing the coin.
 *  
 *  public void Toss()
 *  {
 *      // Create a Random object.
 *      Random rand = new Random();
 *      
 *      // Use a random number to determien
 *      // the side of the coin is facing up.
 *      // 0 = Heads, 1 = Tails
 *      if(rand.Next(2) == 0)
 *      {
 *          sideUp = "Heads";
 *      }
 *      else
 *      {
 *      sideUp = "Tails";
 *      }
 *  }
 *  
 *  // The GetSideUp method returns the value
 *  // of the sideUp field.
 *  
 *  public string GetSideUp()
 *  {
 *      return sideUp;
 *  }
 *  
 * }
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Creating an Object
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Remember, a class is not an object but a description of an object. The Coin
 * class specifies what Coin object is made of, but is does not create a Coin
 * object in memeory. To create a Coin object, we must write a statemenet such
 * as this:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Coin my Coin = new Coin();
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * At this point in your studies, you have created plenty of objects, so this
 * type of statement will be familiar to you. For example, Random object,
 * arrays, and List s are all created this way.
 * Let's look at the different parts
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * * The first part of the statement, appearing on the left side of
 * the = opertor,reads Coin myCoin. This declars a variable named myCoin that
 * can be used to reference an object of the Coin class.
 * 
 * *The second part of the statement, appearing on the reight side of the 
 * operator, returns Coin().
 * This experssion creates an instance of the Conin class cand calls the
 * class's concetuctor. The new operator returns a referecnce to the object.
 * 
 * * The = operator assigns the reference that was returend from the new operator to the myCoin variable.
 * 
 * 
 *
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * After this astatement executes, the myCoin variable will reference a Coion
 * object, as shown in Figure 10-13. Notice in the figrue that the objetc's
 * sideUp field is set ot "Heads", as a result of the constructor.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-3 The myCoin variable references a Coin object
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Note Class are reference types. When you create an object from a class,
 * you use a reference variable to reference that object. When you want to work
 * with the object, you use the variable that references it.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Once we create a Coin object, wea can perform operations with it. For example,
 * saauming the variable myCoin references a Coin object, the follwoing statement
 * calls the object's Toss method:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * myCoin.Toss();
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * And, the following statement displays the side of the coin that is facing
 * up:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Message.Show(myCoin.GetSideUp());
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Where to Write Class Declarations
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * In C#, you have some flexablity in choosing where to write clss declarations.
 * When you start writing youe own classes in a project, it is possible to
 * write them in the same file that contains the form's class. Figure 10-4
 * shows an example of how the Coin class can be writtn in the same file as a 
 * project's Form1 class. Notice in the figure that the Conin class is writtn inside
 * the project namespace. This is not required, but it is a good idea since the
 * class is part of the project. (It does not matter if the class is written
 * before or after the Form1 class.)
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-4 The form1 class and the Coin class in the same source code file
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Although this approach might be acceptable for small classes, it is
 * recommended that you write each class in its own separate file.
 * Doing so makes your code more organized and helps your source code files to
 * a manageable size. IT also makes it easy for you to reuse classes in other
 * projects. In this bookm we always store classes in their own file.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Visual Studio automates the process of adduing a new class file to a project
 * . When you are ready to write a new class, follow theses steps to create a
 * sources files for the class:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 1. Whith the project open in Visual Studio, click Peoject on the menu bar;
 * then select Add Class...This is shown Figure10-5.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * File 10-4 Selecting Add Class...on the Project menu
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 2. The Add New Item window, show in Fire 10-6, shold appear. Make sure Class
 * is selected as the type of item. Notice in the figure that Class1.cs appears
 * in the Name text box. This is the default filename that Visual Studio provides.
 * Change the name to match the names of the class that you are creating. For ex
 * , if you are creating a class named Coin, you change the name to Coin.cs
 * (Be sure the the filename ends with the .cs extension.)
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-6 The Add New item window
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 3.Click the Add button.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * After performing these step, the specified source code file will be created
 * in the project and will be displayed in the code editor. The souce code
 * file already contaubs several using directuves and an empty class declaration
 * that you can edit. Figure 10-7 shows an example. You will also see an entry for 
 * the new source file already contains several using directuves and an empty
 * class declaration that you can edit. Figure 10-7 shows an example, You will
 * also see ab entry for the new souce code file in the Soution Explorer, as 
 * shown in Figure 10-8.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-7 A new class file displayed in the code editor
 * //////////////////////////////////////////////////////////////////////////
 *
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-8 Solution Exprlorer window
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Tutorial 10-1 leads you through the process of creating the Coin class in 
 * an applcaiton that uses ut to simualte a coin that can be tossed.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Tutoral 10-1 Creating and Using the Coin Class
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * In this tutorial, you completed the Coin Toss application.
 * The application's form, which has already been created for you, is shown
 * in Figure 10-9. When you run the compleated application, you can click the
 * Toss Five Times button and the application with simulate a coin being tossed
 * file times. The result of each coin toss are displayed in the list box.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-9 The Coin Toss application's form
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-11 The Coin.cs file in the code editor
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-12 Example output of the Coin Toss application
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Program 10-1 COmpleted code for the COin.cs file in the Coin TOss applcation
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * namespace Coin_Toss
 * {
 *      class Coin
 *      {
 *          // Field to reperent the side facing up:
 *          ptivate string sideup;
 *          
 *          // Random number generator
 *          Random rand = new Random();
 *          
 *          // Constructor
 *          public Coin()
 *          {
 *              sideUp = "Heads";
 *          }
 *          
 *          // THe toss method simulates tossing the coin
 *          public void Toss()
 *          {
 *              // Use a random number to determine
 *              // the side of the coin is facing up.
 *              // 0 = Heads, 1 = Tails
 *              if(rand.Next(2) == 0)
 *              {
 *                  sideUp = "Heads";
 *              }
 *              else
 *              {
 *                  sideUp = "Tails"
 *              }
 *          }
 *          
 *          // The GetSideUp method returns the value
 *          // of the sideUp field.
 *          public string GetSideUp()
 *          {
 *              return sideUp;
 *          }   
 *      }
 * }
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * namespace Coin_Toss
 * {
 *  public paratial class Form1 : Form
 *  {
 *      public Form1()
 *      {
 *          InitializeComponent();
 *      }
 *      private void tossButton_Click(object sender, EventArgs e)
 *      {
 *          // Create a Coin object.
 *          Coin myCoin = new Coin();
 *          
 *          // Clear the ListBox.
 *          outputListBox.Items.Clear();
 *          
 *          // Toss the coin five times.
 *          for(int count = 0; count < 5; count++)
 *          {
 *              // Toss the coin.
 *              myCoin.Toss();
 *              
 *              // Display the side that is up.
 *              outputListBox.Items.Add(myCoins.GetSideUp());
 *          }
 *      }
 *      
 *      priavte void exitButton_Click(object sender, EventArgs e)
 *      {
 *          // Close the form.
 *          this.Close();
 *      }
 *      
 *  }
 *      
 * }
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Passing an Object to a Method 
 * //////////////////////////////////////////////////////////////////////////
 *
 * //////////////////////////////////////////////////////////////////////////
 * When you are devloping applications that work with object, you often need
 * to write methods that accept objects as arguments. For example, the following
 * code shows a method named ShowCoinStatus that accepts a Coin object as an
 * argument:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * private void ShowCoinStatus(Coin coin)
 * {
 *  MessageBox.Show("This side of the coin is up: " + coin.GetSideUp());
 * }
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * The following code sample shows how we might create a Coin object and then
 * pass it as an argument to the ShowCoinStatus method:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Coin myCoins = new Coin();
 * ShowCoinStatus(myCoin);
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Becayse classes are reference types, object that are instanves of a 
 * class are always passed by reference. When you pass an object that is an
 * instance of a class as ab argument, the thing that is passed into the
 * parameter variable is a reference to the object.
 * As a result, the method that receives the object as an argument has access
 * to the actual object (AUTO PASSING DEEP COPY CONSTRUCTOR SWAG :) )
 * (not a cooy if the object). For example, look at the follwoing Flip method:
 * 
 * //////////////////////////////////////////////////////////////////////////
 * private void Flip(Coin coin)
 * {
 *  coin.Toss();
 * }
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * This method accepts a Coin object as an atgument, and it calls the
 * object's Toss method.
 * The following code demonstrates the method being called
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 *  // Create a Coin object.
 *  
 *  Coin myCoin = new Coin();
 *  
 *  // This will display "Heads".
 *  MessageBox.Show(myCoin.GetSideUp());
 *  
 *  // Pass the object to the Filp method.
 *  Filp(myCoin);
 *  
 *  // This might display "Heads", or is might
 *  // display "Tail".
 *  MessageBox.Show(myCoin.GetSideUp());
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 *                          10.2 Properties
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Concept A property is a class member that holds a piece of data about an
 * object. Properties are implemented as special methods that set and get the
 * values of corresponding fields.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * A property is a special type of class member that allows an object to store
 * and retrieve a piece of data. You already familar with properties because
 * you have used them extensively when creating forms. GUI controls have properties
 * that determine their characteristics. For example, assume messageLabel is the
 * name of a Label control. You can assign value a specific value to the control's
 * Text property, as shown here:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * messageLabel.Text = "Hello";
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Also, you can assign a property to a variable. The following statement
 * intitalizes the variable str with the messageLabel control's Text property
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * string str = messageLabel.Text;
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * From these examples, you can see that a preoperty is a class memner that 
 * behaves like a public field. A property is not a publuic field however.
 * It is a special set of methods, know as accessors, which works in
 * conjunction with a priave field. The private field, which is known as
 * the property's backing field, holds any data that is assigned to the 
 * property. The accessors allow code outside the class to get the property's
 * value and assign values to the peroperty.
 * //////////////////////////////////////////////////////////////////////////
 * Let's look at an example of a simple class that has a property. Suppose
 * you want to create a class named Pet that represents the family pet. The 
 * calss will have a Name property to hold the pet's name. The following ocde
 * showns how the the Pet class might be written:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * class Pet
 * {
 *      // Field for the pet's name
 *      priavte string _name;
 *      
 *      // Cponstructor
 *      public Pet()
 *      {
 *          _name = "";
 *      }
 *      
 *      // Name property
 *      public string Name
 *      {
 *          get{return _name;}
 *          set{_name=value;}
 *      }   
 * }
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * The following code shows how you can use the Pet Class's Name property:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 *  // Create two pet objects
 *  Pet myDog = new Pet();
 *  Pet myCat = new Pet();
 *  
 *  // Set their Name properties.
 *  myDog.Name = "Fido";
 *  myCat.Name = "Sylvester";
 *  
 *  // Display their name.
 *  MessageBox.Show("My dog's name is " + myDog.Name);
 *  MessageBox.Show("My cat's name is " + myCat.Name);
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Figure 10-13 setting the myDog object's Name property to "Fido"
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * When an accessor contains only a single statement, many programmes perfer
 * to write the entire accessor in one line of code. For example, the Name
 * property in the Pet class could have been written like this:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 *  // Name property
 *  public string Name
 *  {
 *      get {return _name;}
 *      set {_name = value;}
 *  } 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * The concise style of writting accessor reduces the number of lines code 
 * in a class declarartion without sacificing the code's readabilty. From this
 * point forward in the book's, we will use this style when an accessor has
 * only one statement.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Properties versus Public Fields
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * At this point, you might be wondering why you should go to the troube of 
 * creating a property when it would be easier to simply create a public 
 * feild. For ex, in the Pet class, could't we have just declared a public 
 * string field named Name? if the field is public, if can be directly
 * accessed by code outside the class without the need for accessors.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * It is possivle to take that appeoach, but it is not recommended. Class
 * fields are almost always declared private in order to protect them from
 * accidental corruption. When code outside the class needs to access a field,
 * it does so through public methods
 * (or, in the case of a property, through accessors.) This ensures that the 
 * object owning the fields is in control of all changes being made to them.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Passing Properties as Arguments
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * You can pass a property as an argument to a method. For exampel, line 8 in
 * the following code sample passes a Pet object's Name property as an argument
 * to the MessageBox.Show method:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 *  // Create a Pet objects.
 *  Pet myDog = new Pet();
 *  
 *  // Set the object's Name property.
 *  myDog.Name = "Fido";
 *  
 *  // Display the Name property.
 *  MessageBox.Show(myDog.Name);
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * When you pass a property as an argument to a method, there is one 
 * restriction: Properties can passed only by value.
 * If you try to pass a property to a ref or an out  parameter, and error
 * occues.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Read-Only Properties
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * Sometimes it is useful to makle a property read-only. A read-only property
 * can be read, but it cannot be modified. If you need to make a property 
 * read-only, you  simply do not write a set accessor for property. The 
 * following Circle class show an example
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * class Circle
 * {
 *  // Field
 *  private double _diameter;
 *  
 *  // Constructor
 *  public Circle()
 *  {
 *      _diameter = 0.0;
 *  }
 *  
 *  // Diameter property
 *  public double Diameter
 *  {
 *      get{return _diameter;}
 *      set{_diameter = value;}
 *  }
 *  
 *  // Radius property (read-only)
 *  public double Radius
 *  {
 *      get {return _diameter / 2;}
 *  }
 * }
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Notice that the Radiys property has a accessor but does not have a set 
 * acessor but does not have a set accessor. The RAdius property is read-only.
 * Theregfore, if we create an object of the Circle class, we can get the 
 * value of the Radius property, but an error will cccure if we try to assign a 
 * valur to the Radius property.
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 *                          Avoiding Stale Date
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * In the Circle class example, previously shown, notice that the Radius
 * property does not have its own backing field, as the Diamter property 
 * does. Ratherm the Radius prioerty;s get accessor returns the value of a
 * calculation. The radius is not stored in a field because a circle's radius
 * is depend on the circle's diameter. If we store both the diameter and the
 * radius in their own fields, the radius fields will become incorrect as 
 * soon as the diameter field changes.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * When a field's value is tightly dependent on the other data and that field
 * is not updateed when the other data is changed, it is said that the field 
 * has become stale. When designing a class, you should take cate not to store
 * in a field any calculated data that can potentially become stale. Instead,
 * provide a read-only property, or a method, that retuens the value of the 
 * calculation.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Auto-Properties
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * Sometomes a property simply get and sets the value of a backing field,
 * without performing any other operatrion. For ex. recall the Pet class that
 * we discussed earlier in this section. The classhas a NAme property that gets
 * and sets the value of a backing field named _name. Here is the relevent code
 * from the Pet class:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * private string _name;
 * public string Name
 * {
 *  get
 *  {
 *      return _name;
 *  }
 *  set
 *  {
 *      _name = value;
 *  }
 * }
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * This code can be greatly simplified if we implement the property as an 
 * auto-property. Auto-properties allow you create simple properties without
 * declaring a backiong field, and without writing code to get  and set the
 * property's value. Here is an example of how the Name property in the Pet
 * class can be written as an auto-property:
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * public string Name
 * {
 *      get
 *      set;
 * }
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * When the property is written this way, the C# compiler automatically creates
 * a hidden backing field
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 

 * //////////////////////////////////////////////////////////////////////////
 * 

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 
 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////

 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 *
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * //////////////////////////////////////////////////////////////////////////
 */