/*/////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Chapter 12: Databases
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Topics:
* 
* 12.1 Introducted to Datebase Management Systems
* 
* 12.2 Tables, Rows, and Columns
* 
* 12.3 Creating a Database in Visual Studio
* 
* 12.4 The DateGridView Control
* 
* 12.5 Connecting to an Existing Database and Using Details View Controls
* 
* 12.6 More About Data-Bound Controls
* 
* 12.7 Selecting DAta with the SQL Select Statement
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
* 12.1 Introduction to Database Management Systems
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Concept: A database management system (DBSM) is software that 
* manages large collections of data.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* If an application needs to store only a small amount of data,
* traditioal files work well. These types of files are not practical,
* however, when a large amount of data must be stored and manipulated.
* Many businesses keep hundreds of thousands-or even millions-of data 
* items in files. When a traditional file contains this must data, simple
* operations such as searching, inserting, and deleting become
* cumbersome and inefficient.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* When devloping applicationS that work with an intensive amount of data
* , most developers perfer to use a database management system.
* A database management system (DBMS) is software that is specifically
* designed to store, retrieve, and manipulate large amounts of data in
* an organized and effcient manner. Once the data is stored using the 
* databse management system, applications may be written in C# or other
* languages to communicate with the DBMS. Rather than retrieving or 
* manipulating the data directly, applications can send instructions to
* the DBMS. The DBMS carries out those instructions and sends the results
* back to the application, as Figure 12-1 illustrates.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-1 A C# application interating with a DBMS, which manipulates
* data.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Although Figure 12-1 is simplified, it illustrates the layered nature
* of the application that works with a DBMS. The topmost layer of
* software, which-in this case- is written in C#, interacts with the 
* user. It also sends instructions to the next layer of software, the
* DBMS works directly with the data and sends the result of operations
* back to the applcaiton
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Suppose a company keeps all its product records in a database. The
* company has a C# application that allows the user to loop up 
* information on any product by entering its product ID number. The C#
* application instructs the DBMS to retrieve the record for the product
* with the specified product ID number. The DBMS retrieves the product
* record and sends the data back to the C# application.
* The C# application displaus the data to the user.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The advanatage of this layered appoach to software development is that 
* the C# programmer does not need to know about the physical structure
* of the data. He or she needs to know only how to inseract with the 
* DBMS. The DBMS handlees the actual reading of, writing of, and 
* searching for data.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* SQL Sever Express Edition
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* There are numerous DBMSs is use today, and Visual C# can interact
* with many of them. Some of the most popular ones are Microsoft SQL
* Server, Oracle, DB2, MySQL, and Microsoft Access. In this book, we use
* Microsoft SQL Server Expression Edition because it is automatically
* installed on your system when you install Visual Studio.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 12.2 Tables, Rows, and Columns
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Concept: Data that is stored in a database is organized into tables,
* rows, and columns.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* A database management system stores data in a database. The data that 
* is stored in a database is organized into one or more tables. Each
* tables holds a collection of related data. The data that is stored in
* a table is then organized into rows and colimns. A row is a complete set
* of information about a single item. For ex, suppose we are developing 
* a phone book application and we want to store individual piece of
* information about the item.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* For example, suppose we are developing a phone book application and
* we want to store a list of names and phone numbers in a database.
* We initially store the following list:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Katie Allen       555-1234
* 
* Jill Ammons       555-5678
* 
* Kevin Brown       555-9012
* 
* Elisa Garcia      555-3456
* 
* Jeff Jenkins      555-7890
* 
* Leo Killian       555-1122
* 
* Marcia Potemkin   555-3344
* 
* Kelsey Rose       555-5566
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Think about how this data would appear if we stored it as rows and
* columns in a spreadsheet. We would put the names in one column  and
* the phone numbers in another column. Each row, then, would contain data
* about one person. FIgure 12-2 shows how the third row contains the name
* and phone number for Kevin Brown
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-2 The table
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* |SQL Server Data Type|    |Description|   |Corresponding C# or .NET Framework Data Type||
* |_______________________________________________________________________________________|
* |bit|
* |
* |decimal(t,d)|
* |
* |folat|
* |
* |int|
* |
* |money|
* |
* |nchar(n)|
* |
* |nvarchar(n)|
* |
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* When we create a database table to hold this information, we organize
* it in a similar manner. We give the table a name, such as Person. In 
* the table we create a column for the names and a column for the phone
* numbers. Each column in a table must have a name, so we can name our
* columns Name and Phone, respectively.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Column Data Types
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* When you create a database table, you must specify a data type for the
* columns. The data types that you can choose from are not C# data types,
* however. They are the data types that are provided by the DBMS. In this
* book, we are using Microsoft SQL Server, so we will select the data 
* types provided by that DBMS.
* 
* Table 12-1 lists a few of the Microsoft SQL Server data types
* and shows
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Note: Table 12-1 shows the data types that you will most ofter use
* while learning. There are only a small number of the data types
* provided by Mictosoft SQL Server, however.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Note: The nchar(n) and nvarchar(n) data types are both used to store
* strings. An nchar(n) column is fixed in length and will always use n
* characters of space in the database. An nvarchar(n) column is variable
* in length, and the amount of space is used in the database will be enough
* to accommodate the piece of data it holds, up to n characters.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Primary Keys
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Most database tables have a primary key, which is a column that can
* be used to identify a specific row. The column that is designed as
* the primary key must hold a unique value for each row. Here are some
* examples:
* 
* *A table stores employee data, and one of the columns holds
* employee ID numbers.
* Because each employee's ID number is unique,
* this column can be used as the primary key.
* 
* *A table stores product data, and one of the columns holds the
* product number. Because each product has a unique product number,
* this column can be used as the primary key.
* 
* *A table stores invoice data, and one of the columns holds incoice
* numbers. Rach incoice has a unique invoice number, so this column can
* be used as a primary key.
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Identify Columns
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Sometimes, the data that you want to store in a table does not contain
* any unique data. Two people can have the same name, so it is possible 
* that a name might appear more than once in the Name column.
* Consequently, you cannot use the Name column or the Phone column as a 
* primary key.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In a case such as this, it is necessary to create an identity column
* specifically to serve as the primary key. An identity column is a 
* column that contains unique values that are generated by the DBMS.
* Identity columns typically contain integers. Each time a new row is 
* added to the table, the DBMS automatically assigns a unique value to
* that row's identity column.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* For ex, when designing the Person table that we previously discussed,
* we could areate an int column for each row.) Then we could designate the
* PersonID column as the table's primary key. Figure 12-3 shows an example
* of the Person table after we created it and entered data into it.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-3 The Person table with data entered
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Allowing Null Values
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* If a column contains no data, it is said to be null. Sometimes it is
* okay for a column to be left empty. Some columns, however, such as 
* primary keys, must contain a value. When you designing a table, you
* can specify whether a column is allowed to be null. If a particular 
* column is not allowed to be null, any time you add a row to the table,
* the DBMS will require that a value be provided for the column. Leaving
* the column empty results in an error.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
* 12.3 Creating a Database in Visual Studio
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Concept: A .NET application uses several components, arranged in 
* layers, to connect to a database. Visual Studio provides tools that 
* allow you to create a database and configure the various components
* that an application needs to connect to it.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Connecting an Application to a Database
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-4 The components used by an application to connect to a \
* database
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Here is a summary of the layers shown in the figure:
* 
* *DATA SOURCE- As its name implies, a data source is a source of data
* with which the application can work. Data sources are usually databases,
* but they can also be Excel spreadsheets, XML data, text files, or Web
* services.
* 
* *TABLE ADAPTER-A table adapter connects to a data source and can retrieve
* data from a table in a data source. It can also update the table in the 
* data source.
* 
* *DATASET-A dataset gets a copy of a table from the table adapter and
* keeps the copy of the table in memory.
* Insitead of working directly with the database, the application workds
* with the dataset, modifying rows, deleting rows, adding new rows, etc.
* Then, the dataset can instruct the table adapter to write the
* changes back to the database.
* 
* *BINDING SOURCE-A binding source is a component that can connect user
* interface controls directly to a dataset.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Fortunately, Visual Studio provides wixards that make it easy to 
* create and configure the necessary components. In Tutorial 12-1, you
* start a new C# project and use Visual Studio to perform the following:
* 
* * Create an SQL Server database
* 
* * Design a table in the database
* 
* * Add data to the table
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Tutorial 12-1: Starting the Phone Book Application and Creating
* the Phonelist.mdf Database
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* IN the next two tutorials, you create an application that uses a 
* database to store a list of names and phone numbers. In this tutorial,
* you start the application by creating the database. In the next tutorial,
* you connect this application to the database, add a dataset, and add a
* control to the form that allows the user to interact with the database.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 1:Start Visual Studio.Create a new Windows Forms Application 
* project named Phone Book.
* 
* Step2:Change the Form1 form's Text property to Phone Book.
* 
* Step3:Next you create a new database and add it to the project.
* Click Project on Visual Studio menu bar and then select
* Add New item...
* 
* Step4:The Add New tiem window will appear. Scroll down the list of
* items and select Service-based Database, as shown in Figure 12-5.
* You also need to specify the database's named in the Name text box
* at the bottom of the window. A default name, such as Database1.mdf
* appears there. Change the name to Phonelist.mdf.(Be sure to keep the
* .mdf file extension.)
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-3 The Add New Item window
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 5: Click the Add button in the Add New Item window. The adds an
* SQL Server database named Phonelist.mdf to your project.
* 
* Step 6: Look at the Solution Explorer, shown in Figure 12-6, and notice
* that it now contains an entry for the Phonelist.mdf database.
* Double-click the entry for Phonelist.mdf database. 
* Notice that a new window named Server Explorer is now open in the
* area where the Toolbpx is lolcated.
* 
* The Server Explorer is shown in Figure 12-7.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-6 Solution Explorer entry for the Phonelist.mdf database
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-7 Server Explorer
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 7: Now you add a table to the Phonelist.mdf database. In the 
* Server Explorer, make sure the Phonelist.mdf entry is expanded, as
* shown in Figure 12-7. Right-click on Tables, and as shown in
* Figure 12-8, click Add Table on the menu.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-8 Adding a table to the Phonelist.mdf database
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This displays the TAble Designer, as shown in Figure 12-9. You use
* the Table Designer to specify the names and data types of the table's
* columns.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-9 The Table Designer
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 8: Look at the Table Designer and notice that a column named
* Id has automatically been added to the table.
* Figure 12-10 shows how to read the info about the column in the
* Table Designer:
* 
*   *The key icon (key) that appears to the left of the name indicates
*   that the colum is the table's primary key.
*   
*   * The name of the column is Id.
*   
*   * The column's data type is int.
*   
*   *The Allow Nulls checkbox is not checked. This means that the
*   column must have a value(it cannot be null).
*   
*   We want to keep this column, but we are going to make some changes
*   to it. In the next step, we will change the column's name to
*   PersonID, and we will make it an identity column (so the database
*   will automatically generate unique integer values for it)
*   
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-10 The Id column that is automatically added to the table
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 9: Click on the column name (Id) in the Table Designer, and change
* the name to PersonID. Press the Tab key. The TAble Designer should appear
* as shown in Figure 12-11.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-11 The column name changed to PersonID
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 10: With the column still selected, notice that the Properties
* window is showing the column's properties. Scroll down until you see 
* identity Specification. Double-clickl identity Specification, and you
* should see the (Is identity), Idenity Increment, and Identity Seed 
* propetues appear below it, as shown in Figure 12-12.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-12 The column's Identity Specification properties displayed
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Steps 11: Change the (it Identity) property to True. This designates
* the column as an identity column. Notice that the identity increment
* and identity Seed properties are both now set to 1, as shown in Figure
* 12-13. Leave these values as they are.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-13 The Identity Specification properties set to the
* desiered values
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 12: In the Table Designer, add another column named Name. Select
* nvarchar(500)as the data type and remove the check under Allow Nulls.
* The Table Designer should now appear as shown in Figure 12-14.
* 
* Step 13: Add another column named Phone.Select nvarchar(50) as the 
* data type and remove the check under Allow Nulls. The Table Designer
* should now appear as shown in Figure 12-14.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-14 The PersonID, Name, and Phone columns created in the
* Table Designer 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 14: Toy are finished designing the table, but you need to change
* the table's name. When you create a new table in the Server Explorer, 
* it is given a default name, such as Table. Notice at the bottom of the
* screen (below the Table Designer), you see an area labeled T-SQL. As
* shown in Fogire 12-15, this first statment in this window shows the name
* of the table. Change the first statement so it reads as the following:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* CREATE TABLE [dbo].Person
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-15 The T-SQL window
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* The T-SQL window should now appear as shown in Figure 12-16.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-16 The table named changed to Person
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 15: Although you changed the table's name in the T-SQL window,
* the change does not take effect until you update the database. Click
* the Update button that appears in the upper left corner of the Table 
* Designer, as shown in Figure 12-17.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-17 The Update button to update the database
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* Step 16: The Preview Database updates window, shown in Figure 12-18
* . will appear next. Click the Update Database button. After a moment,
* you should see confirmation that the update was successful at the 
* bottom of the screen, similar to that shown in Figue 12-19. Close the 
* TAble Designer window.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-18 The Preview Datebase Updates window
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-19 Confirmation that the database was updated 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 17: The next steps is to enter data into the table. In the Server
* Explorer, expand the Tables entry and then right-click the Person
* entry. You will see the pop-up menu shown in Figure 12-20. Click Show
* Table Data in the menu.
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-20 Clicking Show Table Data
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Note: If you do not see the entry for the Person table in the Server
* Explorer, click the Refresh button () in the upper-left corner of the 
* window.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 18: The tables should now be opened and ready for input, as 
* shown in Figure 12-21. Enter several names and phone numbers into the
* Name and the Phone columns. As you enter data, keep the folowing in 
* mind:
* 
*   *Do not enter values for the PersonID column. The system automatically
*   generates a value for the PersonID column each time you add a new row.
* 
*   *Do not enter values for the Name and Phone columns.
*   Recall that you removed the check form Allow Nulls for these cloumns
*   when you designed the table.
*   If you try to move away from a row without specifying values for
*   these columns, you will see an error message. 
*   
*   *Exclamation points will appear next to the columns as you enter 
*   data. These simply mean that the data has not saved to the database.
*   When you move away from the row, the data is saved and the
*   exclamation points disappear.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-21 Ready to enter data into the Person Table
* /////////////////////////////////////////////////////////////////////

* /////////////////////////////////////////////////////////////////////
* Figure 12-22 Sample data entered into the Person Table
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 19: Once you have entered all the data, click File on the Visual
* Studio menu and then click Save All. The rows are saved to the
* Phonelist.mdf database.
* 
* Step 20: Close the table so the Form1 form is displayed in the
* Designer.
* 
*   Let's review what you have done up to this point:
*   
*       *Create an SQL Server database named Phonelist.mdf
*       
*       *Designed and create a table named Person
*       
*       *Entered sameple data into the table
*       
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The Database File's Location - The database file will be created in the
* project folder.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
* 12.4 The DataGridView Control
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Concept: A DataGridView control can display a database table in a 
* scrollable grid.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* A data-bound control is a user interface control that is connected
* to a data source. For ex, a data-bound can be connected to a column
* in a database table. Data-bound controls automatically display data 
* from the data source and can be used to change the data that they are
* bound to. One of the simplest and most powerful data-bound controls
* is the DataGridView control. A DataGridView control can display an 
* entire database table in a scrollable grid on an application's form.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In Tutorial 12-2, you continue working on the Phone Book application 
* that you started in Tutorial 12-1. You connect the application's
* form to the Phonelist.mdf database and add a DataGridView control that
* can be used to view and update the Person table.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Tutorial 12-2: Completing the Phone Book Application
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* Step 1:Make sure the Phone Book is open in Visual Studio from the previous tutorial.
* 
* Step 2: Click Project on the Visual Studio menu and then click Add
* New Data Source ... You should see the DAta Source Configuration Wizard,
* as shown in Figure 12-24
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
*   Figure 12-24 The Data Source Configuration Wizard-Choose a Data
*   Source Type
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 3:The data you are adding is a database, so make sure Database is selected and
* then click Next >. The window now appears, as shown in Figure 12-25
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-25 The Data Source Configuation Wizard - Choose a Database
* Model
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 4:Make sure Dataset is selected, and click Next 7. The window 
* now appears, as shown in Figure 12-26
* 
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-26 The Data Source Configuration Wizard - Choose Your Data
* Connection
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* Step 5:In this window you are asked to choose a data connection, and
* the Phonelist.mdf database should be automatically selected, as shown
* in Figure 12-26. Simply click Next>. The window now appears, as shown
* in Figure 12-27
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-27 The Data Source Configuration Wizard-Save the Connection
* String
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 6:In this window you are asked if you want to save a connection
* string. Leave the Yes box checked and click Next>.
* 
* Step 7:In this window that appears now, you are asked to choose the
* database object that you want to include in the dataset. Expand the 
* Tables entry, and place a check next to Person, as shown in Figure 12-28.
* 
*  /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-28 The Data Source Configuration Wizard-Choose Your
* Database Objects
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* At the bottom of the window you can specify a name for hte dataset.
* The default name PhonelistDataSet is already provided. because you 
* selected the Person table as the database object, change the dataset
* name to PersonDataSet. Click Finish.
* 
* Here is a summary of what you just did:
*   * You added the Phonelist.mdf database as a data source to the application.
*   * You created a dataset component that is connected to the Person table.
*   The name of the dataset component is PersonDataSet.
* 
* Step 8: Visual Studo provides a Data Sources window that lets you 
* see all the data sources in the current project. Click view on the 
* Visual Studio menu bar, then select Other Windows, then click DAta
* Sources. The Data Sources window should be displayed, as shown in 
* Figure 12-29. Notice that the window shows the name of the dataset,
* which is PersonDataSet, and the name of the table to which the dataset
* is connected, which is Person.
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figuer 12-29 The Data Sources window
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 9: Next you should select DataGridView as the default data-bound
* control for the Person table. In the Data Sources window, click the 
* entry for the Person table, as shown in the image on the left in 
* Figure 12-30. Then, click the down arrow(V), and select DataGridView,
* as shown in the image on the right.
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-30 Selecting DataGridView as the data-bound control for the 
* Person table
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 10: Now you add a DataGidView control to the form. As shown in 
* Figure 12-31, click and drag the Person table from the Data Sources
* window onto the form. As shown in Figure 12-32, this creates a 
* DataGridView control and a navigation bar on the form. (Adjust the 
* size of the form and the size and position of the DataGridView control
* so they appear similar to Figure 12-32.)
* 
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-31 Dragging the Person table onto the form.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-32 The DataGridView Control placed on the form
* 
* Notice that the component tray (Gray area at the bottom of the
* Designer) now contains several items. These are components that were
* automatically created when you placed the DataGirdView control on the 
* form. Here's a summary of the components:
* 
* *personTableAdapter - This is the table adapter. It gets data
* directly from the data source, which in this case is the
* Person.mdf database.
* 
* *tableAdapterManager- In many applications, the database has multiple
* tables from which we want to get data. A table adapter manager
* is a component that managers multiple tables.
* 
* *personDataSet - This is the dataset component. It gets a copy of
* the table from the table adapter and keeps it in memory. The applca
* 
* *personBindingSource - This component connects the DataGridView control
* to the data source, and provides a channel of communication between
* the two two.
* 
* *personBindingNavigator - This is the nav bar.
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 11:
*       Save and run the application. The form will appear similar to 
*       Figure 12-33, with the rows of the Person table displayed in the
*       DataGridView control. You can use the DataGridView control in 
*       the following ways:
*       
*       *To change the value of a call, click the cell with the 
*       mouse and then change its data as necessary.
*       
*       *To select a row, click the button that appears next to it,
*       along, the left side of the control.
*       
*       *To delete a row, select it; then either click the Delete
*       button (X) on the naviagation bar or
*       press Delete on the keyboard.
*       
*       *To add a new row, scroll to the bottom of the grid, where
*       you will see an empty row. Enter the new data in the empty row.
*       
*       *The changtes that you make affect only the in-memory copy
*       of the table that is held in the dataset.
*       To save the changes to the database, click the Save button
*       ( ) on the navigation bar.
*       
*       *To sort the rows on a column value, click the column heading.
* 
* ////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-33 The Phone Book application running
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Step 12: Use the DataGirdView control to make several changes to the
* dataset. For ex, change a value in an existing row, add a new row,
* and delete an exising row. Be sure to click the Save button () on the
* navigation bar to save your changes.
* 
* Step 13:Close the application and then rerun it to verify that your
* changes werte saved. When you are finished, close the application.
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Auto-Generated Code
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* When you place a data-bound control, such as the DataGridView, on a
* form, Visual Studio does a lot of work hebind the scenes to make the 
* control functions. In fact, you completed the appplication in Tutorial
* 12-2 without writing a single line of code! If you open the form in the
* code editor, however, you will see that Visual Studio generated some
* code, as shown in Program 12-1.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Program 12-1 Form1 code in the Phone Book application
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* namespace Phone_Book
* {
*   public Form1()
*   {
*       InitializeComponent();
*   }
*   
*   private void personBindingNavigatorSaveItem_Click(object sender, EventArgs e)
*   {
*       this.Validate();
*       this.personBindingSource.EndEdit();
*       this.tableAdapterManager.UpdateAll(this.personDataSet);
*   }
*   
*   private void Form1_Load(object sender, EventArgs e)
*   {
*       //TODO: This line of code loades data into the...
*       this.personTableAdapter.Fill(this.personDateSet.Person);
*   }
* }
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Visual Studio adds an event handler in lines 20-26 that execites when
* the user clicks the Save button on the navigation bar. In a nutshell,
* the statements in this method apply any changes that have been made
* to the DataGridView control to the dataset and then save the dataset
* to the database.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Visual Studio also adds a Load Event handler for the form, in lines 
* 28-33. In line 31, the event handler calls the table adapter's Fill
* method, passing a reference to the Person table (contained in the 
* dataset) as an argument. This statement causes the table adapter to
* load data from the database into the dataset
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* 12.5 Connecting to an Existing Database and Using Details View
* Controls
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Concept:  You can easily connect an application to an existing \
* database. The Details view are an alternative to the DataGridView
* control for interacting with a database.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In Tutorial 12-1, you used Visual Studio to create a database from
* scratch and popuate its table with data. More ofter, programmers must
* create applications that connect to existing databases. In Tutorial
* 12-3, you create an application and connect it to a database that is 
* provided in the Student Sample Program files. The database is named 
* ProductDB.mdf, and you will find it in the Chap12 folder. The database
* has one table named Product. Figure 12-34 shows the data that is stored
* in the Product table.
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-34 The Product table in the ProductDB.mdf database
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Here are some things to know about the columns in the Product table:
* 
*   *The Product_Number column is the primary key.
*   Its data type is nchar(5), and nulls are not allowed.
*   
*   *The Description column's data type is nvarchar(50), and nulls are
*   not allowed.
*   
*   *The Units_On_Hand column's data type int, and nulls are not 
*   allowed.
*   
*   *The Price colum's data type is money, and nulls are not allowed.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In the tutorial, you also learn how to create a Details view. A Details
* view is a set of indivicual controls that are bound to the columns in
* a single row. Rather than showing multiple rows at once, a Details
* view lets the user see one row at a time. Figure 12-35 shows an ex of 
* a form with a set of Details view controls. In the figure, the TextBox
* controls are bound to the columns of the Product table. Notice that the
* form also has a navigation bar. The navigation bar works just like the
* one that appears with a DataGridView control. It can be used to move
* forward and backward in the table, add new rows, delete the current
* display row, and save the changes that have been made.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-35 Details view
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* Notice in Figure 12-35 that each TextBox control has a Label control
* next to it, indentifying the column. When you create a Details view,
* these LAbel controls are created automatically. As you can see in the
* figue the underscores in the column name are replaced by spaces in
* the Label controls
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Creating the Products Application and Using a Details View
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-36 The Data Configuration Wizard-Choose a Data Source Type
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-37 The Data Source Configuation Wizard-Choose a Database
* Model
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-38 The Data Source Configuration Wizard-Choose Your Data 
* Connection
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-39 The Add Connection dialog box
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Perform the following:
* 
*   *Look carfully at the selected data source. Make sure Microsoft SQL
*   Server Database File (SqlClient) is selected. If not, click the 
*   Change... button and select Microsoft SQL Server Database File.
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-41 The Sata Source Configuration Wizard with ProductDB.mdf
* selected
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-42 Message about copying the database to the project
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* FIgure 12-34 The DAta Source Configuration Wizard - Save the
* Connection String
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-44 The Data Source Configuration Wizard-Choose Your Database
* Objects
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-45 The Data Sources window
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-46 Selecting Details as the data-bound control for the 
* Product table
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-47 Dragging the Product table onto the form
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-48 Placing the Details view controls on the form
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-49 The Phone Book application running
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Copies of the Database at RunTime
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Recall that in Step 9 of Tutorial 12-3, Visual Studio displayed a 
* message indicating that you had selected a database file located 
* outside the project folder, and you were asked if you wanted to copy
* the file into the project. (See Figure 12-42.) You answered Yes, and,
* as a result, the database file was copied into the project folder.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Then, when you run the application for the first time, Visual Studio
* copied the database file from the project folder to the project's
* output folder, which is the bin\Debug folder. Each subsequent time
* the application runs, it connects to the copy of the database in 
* the output folder instead of the projects folder.
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Suppose you make a change to the application, such as repositioning a 
* control, and you run it again. Because you modified the application,
* Visual Studio rebuilds the project (recompiles it). Visual Studio also
* copies the database file, once again, from the project folder to the 
* output folder. As a side effect, any changes that you previously made to
* the database will be lost
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* You can get around this behavior by answering No to the dialog box
* shown in Figure 12-42. That causes the application to always connect
* to the database in its external location. However, if you are being
* graded on the project, your instructor will have trouble running it
* on his or her computer because the database file will be missing.
* So, it is normally a good idea to answer Yes to the dialog box in 
* Figure 12-42, as long as you are aware that rebuilding the project
* causes the database in the output folder to be overwritten.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
* 12.6 More About Data-Bound Controls
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Concept: The DataGridView control and the Details view may be 
* custimized in various ways. Other controls, such as list boxes, can
* be data-bound to allow interaction with a database.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Customizing the DataGridView Control
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In the Designer, if you select a DataGridView, you will see a small
* arrow in the upper-right corner of the control's bounding box. Figure
* 12-50 shows an example. This is called a smart tag. When you click on
* the smart tag, a task panel will pop up, giving you a number of opertions
* that you can perform with the DataGridView control. Figure 12-51 shows
* an example of the tasks panel.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-50 A DataGridView control's smart tag
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-51 A DataGridView control's tasks panel
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Notice in the figure that the tasks panel has the following check
* boxes:
* 
* *Enable Adding-When this item is checked, the user may add rows in
* the DataGridView control. This item is checked by default.
* 
* *Enable Editiing-When this item is checked, the user may change the
* constents of rows in the DataGridView control. This item is checked by default
* 
* *Enable Deleting-When this item is checked, the user may delete rows
* from the DataGridView control. This item is checked by default.
* 
* *Enable Column Reordering-When this item is checked, the user may
* click and drap columns, while the application is running, to
* rearrange them in the DataGridView control.
* This item is not checked by default.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* If you do not want the user to be able to add, edit, or delete rows
* in the DataGridView control, simply remove the appropriate checkmakers
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-52 Disabling the Delete button
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-53 The Add, Delete, and Save button disabled (grayed-out)
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Customizing the Details View
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* When you create a Details view, the type of controls that a column
* is automatically bound to is determinded by the column's data type,
* as follows:
* 
* *Columns containing character data are bound to TextBox controls
*  by default.
*  
*  *Numeric columns are bound to TextBox controls by default.
*  
*  *Bit columns are bound to CheckBox controls
*  
*  *Datetime columns are bound to DataTimePicker controls, 
*  which allow the user to select a data from a small pop-up calender.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* It is possible to change the type of control that a column is bound
* to in a Details view. For ex, recall that the Product table in
* Tutoriaal 12-3 has a column named ProductNumber. The Product_Number
* column is the primary key for the table, so you might not want the
* user to be able to change it.
* A Label control might be a better option. That way, the user can see
* the product number but cannot change it.
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Before you place a Details view on a form, you can select the type
* of control to which each column will be bound. In the Data Sources
* window, expand the table entry as shown in the image on the left in
* Figure 12-54. Then, select a column and click the down arrow(v) that 
* appears next to it, as shown in the image on the right in the figure.
* A menu will pop up that shows the types of controls that you can 
* select. In the image on the right in Figure 12-54, we are selecting
* the Label control for the Project_Number column. Then, when we create
* the Details view, it appears as shown in Figure 12-55.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-54 Selecting the type of data-bound control for a column
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-55 Details view with the product number displayed in a 
* Label control
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* When you drag an entire table from the Data Sources window and drop
* it onto a form, the Details view that is created contains data-bound
* controls for all the columns. Sometimes you might not want all the 
* columns displayed, however. Alternatively, you can drage the
* individiual columns, one at a time, from the Data Sources window onto
* the form. Figure 12-56 Shows an example of a Details view that displays
* only the product number and description. We created this details view
* by dragging the Product_Number columns and then the Description
* column From the Data Sources window onto the form.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-56 Product number and description displayed
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Binding Columns to ListBox Controls
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* A list box can be a convenient way to look up data in a table. You 
* can bind a column to a ListBox control, which causes all the values
* in that column to be displayed in the list box. When the user selects
* an item from the list box, the rest of the columns from the selected
* row can be displayed.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* To bind a ListBox control to a column, you must set two of the controls
* properties:DataSource and DisplayMember. The DataSource property
* identifies the table from which the ListBox will get its data
* . The DisplayMember property identifies the column.
* In Tutorial 12-4, you use this techinque to create a data loopup
* form the ProductDB.mdf database.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Tutorial 12-4 Creating a Product Loopup Application
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Note This is the same procedure that you preformed in Steps 3-11
* in Tutorial 12-3. If you want more detailed guidance, go back
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-57 ListBox and Label created
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-58 Product table selected in the DataSource property
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-59 Select Details
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-60 Column names displayed
* /////////////////////////////////////////////////////////////////////
* 
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-61 Column names displayed
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-62 The Product LoopUp application running
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Having Data-Bound Controls on Multiple Forms
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* You have seen that when you place a data-bound control on a form, 
* Visual Studio creates a set of components that allow the form to 
* connect to the database. These components include a dataset. When you
* place data-bound controls on multiple forms, keep in mind that each
* form has its own dataset. When you make changes to the dataset in one
* form, those chagnes do not automatically appear in other forms that 
* have thir own dataset. Consider the following secenaro:
* 
* /////////////////////////////////////////////////////////////////////
* * Form1 displays a view of a database, perhaps in a DataGridView control.
* 
* * Some code in Form1 displays Form2.
* 
* * Form2 also display a view of the same database, allowing the user
* to make changes and save those changes to the database.
* The user closes Form2.
* 
* *Form1 is still displaying its original copy of the data. Its dataset
* does not automatically update, so Form1 does not show the changes that 
* were made by form2.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* To make sure that a dataset contains a current copy of the data, you
* need to write code that causes the table adapter to read the database
* table and fill the dataset. You do this by calling the table 
* adapter's Fill method. In Tutorial 12-5, you learned how to do this by
* creating an application that correctly handles the secenario previously
* discussed.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Tutorial 12-5 Creating the Multiform Products Application
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-63 Creates a DateGridView control on the form
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-64 The form and DataGridView control resized
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-65 Button controls placed on the MainForm
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-66 Changing the Product table's default view to Details
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-67 Creating a Details view on the form
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-68 Form rezise and Close button placed
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Program 12-2 Completed code for the DetailsForm
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* namespace Multiform_Products
* {
*   public partial class DetailsForm : Form
*   {
*   public DetailsForm()
*   {
*       public DetailsForm();
*   }
*   
*   private void productsBindingNavigationSaveItem_Click(object sender,
*   EventArgs e)
*   {
*       this.Validate();
*       this.productBindingSource.EndsEdit();
*       this.tableAdapterManager.UpdateAll(this.productDateSet);
*   }
*   
*   private void closeButton_Click(object sender, EventArgs e)
*   {
*       // Close the form.
*       this.Close();
*   }
*   }
*   
* }
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* namespace Multiform_Products
* {
*   public partial class MainForm : Form
*   {
*   public MainForm()
*   {
*       InitializeComponent();
*   }
*    private void productBindingNavigatorSaveItem_Click(object sender,
*   EventArgs e)
*       {
*           this.Validate();
*           this.productBindingSource.EndEdit();
*           this.tableAdapterManager.updateAll(this.productDateSet)
*       }
*    private void MainForm_Load(object sender, EventArgs e)  
*    {
*       //TODO: This line of code loads data into the...
*       this.productTableAdapter.Fill(this.productDataSet.Product);
*    }
*    
*    private void exitButton_Click(object sender, EventArgs e)
*    {
*       // Close the form.
*       this.Close();
*    }
*   }
*   
* }
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
* 12.7 Selecting Data with the SQL Select Statement
* /////////////////////////////////////////////////////////////////////
* /////////////////////////////////////////////////////////////////////
*  
* /////////////////////////////////////////////////////////////////////
* Concept: SQL is a standard language the most DBMS support. The Select
* statement is used in SQL to retieve data from a database.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* SQL, which stands for structured query language, is a standard 
* lanagueage for working with database management system.
* It was originally developed by IBM in the 1970s. Since then, SQL has
* been adoped by almost all database software ventods as the languate
* for choice for interacting with their DBMS.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* SQL consists of several keywords. You use the keywords to constructs
* statements, which are also known as queries. These statement, or 
* queries, are subments, which are also known as queries.
* These statements, or queries, are submitted to the DBSM and are 
* instructions directing the DBMS to carry out operations on its data.
* In this section, you learn how to construct simple SQL statemetns and
* them pass them tp tje SQL Servers DBMS.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In SQL you use the Select statement to retrieve the rows in a table.
* As its name implies, the Select statement allows you to select specific
* rows. We 
* start with a very simple form of the statement, as shown
* here:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select Columns From Table
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In the General form, Columns is one or more column names, and Table
* is a table name. Here is an ex Select statemetn that we might execute
* on the ProductDB.mdf database:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select Description From Product
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This statement retrieves the Description column for every row in the 
* Product table. You can specify more than one column in a Select
* statement by seoarating the column names with commas. Here is an
* example:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select Description, Price From Product
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This statement retrieves the Description column and the Price column
* for every row in the Product table. If you wish to retrueve every
* column in a table, you can use the * charater instead of 
* listing column names. Here is an example:
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This statement retrieves every column for every row in the Product
* table. SQL statements are free form, which means that tabs, newlines,
* and spaces between the keywords are ignored. For example, the
* statement
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* works the same as
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select
*     *
* From
*   Product
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In addition, SQL keywords and table names are case insensitive.
* The previous statement could be written as
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* SELECT * FROM PRODUCT
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Specifying a Search Criteria with the Where Clause
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Sometimes you want to retreieve every row in a table. In many
* siutations,however, you want to narrow the list down to only selected
* rows in the table. That is where clasuse comes in. The Where clasue 
* can be used with the Select statement to specify the search criteria.
* When you use  the Where clause, only the rows that meet the search
* criteria are returned. The general format of a Select statement with
* a Where clause is
* 
* /////////////////////////////////////////////////////////////////////
* Select Columns From Table Where Criteria
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In the general format,Criteria is a conditional expression. Here is
* an example of a Select statement that uses the Where clause:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product Price > 20.00
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The first part of the statement, Select * Form Product, specifies that
* we want to see every column. The Where clause specifies that we want
* only the rows in which the contents of the Price column are greater
* 20.00. As a result, the Select statement retrieves only the rows in
* which Price is greater than 20.00.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Table 12-2 SQL relational operators
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Notice that the equal to not equal to operators in SQL are different 
* from those in C#. The equal to operator is one equal sign, not two
* equal signs. The not equal to operator is <>.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Let's look at a few more examples of the Select statement.
* The following statement could be used to retrieve the product numbers
* and prices of the all the items that are priced at $28.95:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select ProductNumber, Price From Product Where Price = 28.95
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The following Select statement retrieves all the columns from only 
* the rows where the description is "Denim Jeans":
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product Where Description = 'Denim Jeans'
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In SQL, string literals are enclosed in single quotes, not double
* qoutes.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Tip: If you need to include a single quote as part of a string, simply
* write two single qoutes in its place. For ex, suppose you wanted to 
* search the Product table for Katy's Wool Cap.
* You could use the following statement:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product Where Description = 'Katy''s Wool Cap'
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* String Comparisions in SQL are case sensitive.
* If you ran the following statement aginst the Product table, you would 
* not get any results
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* However, you can use the the Lower() function to convert a string to 
* lowercase. here is an ex:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product Where Lower (Description) = 'denim jeans'
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This statement converts the Description column to all lovercase before
* performing the comparsion. As a result, it will return all rows where
* Descritption equals "Denim jeans" regardless of case. You could use
* the Upper function, which converts a string to uppercase, to achieve
* the same results:
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product Where Lower (Description) = 'DENIM JEANS'
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Using the List Operator
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Sometimes searching for an exact string will not yield the results
* you want. For ex, suppose the Product table contains the rows
* shown in Figure 12-69 and we want a list of all the shirts.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-69 The Product table in the ProductDB.mdf database
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The following statement will not work. Can you see why?
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product Where Descriptio = 'Shirt'
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This statement will search for rows where the Description column is 
* equal to the string "Shirt".  Unfortunayely, it will find none because
* there are no rows in which the Description column us equal to "Shirt".
* Hoever, the word "Shirt" does appear in the Descirption column of
* some of the rows. For example, in Figure 12-69 the first row's 
* Description column is "Ocfored Cloth Shirt",
* The second row's Description colum isDesciropion colmn is "" Polline Shirt
, so forth.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 10-70 Schemen definition file entry in the Solution Explorer
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In order to find all the shirts, we need to search for rows where "Shirt"
* appears as a shubstring in teh Decription column. You can perform just
* such a seqarch using the List operator. here is an ex of how to use it.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product Where Description Like '%Shirt%'
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The Like operator is followed by a string that contains a charater 
* poatteren. in this ex, the charaacter aptteren iws "%%Shirt". 
* The % symbol is used as wild card character. 
* It reperesnets any sequence of zero of more characters.
* The pattern '%Shirt%' specifies that the string "Shirt" must apper
* with any sequence of characters before or after it. So, the statemenet
* previously shown would retuen all rows in which the Description column
* contains the sting "Shirt".
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Likewise, the following statement will result in all the rows where
* the Description column starts with the word "Chino":
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * Form Product Where Description Like 'Chino%'
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* THe underscore character(_) is alsos used asa wildcard. Unlike the 
* & characrter, the underscore represents A single character. For ex,
* look at the following statement:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product Where Product_Number Like '2_-0_'.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This statement will result in all the rows where the Product_Number
* column begin with "2", followed by any one character, followed by 
* "-0", followed by any one characer.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* You can use the Not operator to disqualify a character pattern in a 
* search criteria. For example, suppose you want a list of all the items
* that are not shirts. The following statement will yield just thoes
* results:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * Form Product Where Description Not Like '%Shirt%'
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Using And and Or
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* You can use the And Or logivsl operatrors to specify multiple search
* criteria in a Where clause. For example, look at the following
* statement:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * Form Product Where Price > 20.00 And Price < 30.00
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The And operator requires that both search criteria be true in order
* for the a reow to be a quallified as a match. The only rows that will
* be returned from this statement are thoes where the Price column
* contains a value that is grater than 20.00 and less than 30.00.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Here's an example that uses the Or operator:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product
* Where Description List '%Shirt%' or Product_Number List '10-%'
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The Or operator requires that either of the search criteria be true
* in order for a row to be qualified as a match. This statement searches
* for rows where the Descruiption column contains the string "Shirt" at
* any posirion or where the Product_Number column starts with "10-".
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Sorting the Results of a Select Query
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* If you wish to sort the results of a Select query, you can use the 
* Order By clause. Here is an example:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product Order By Price
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This statemetn produces a list of all the rows in the Product table,
* ordered by the Price column, The list will be sorted in ascending 
* order on the Price column, meaning that the lowest-priced coffess
* will appear fist.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Here's a Select query that uses both a Where clause and an Oeder
* By clause:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * Form Product
* Where Price > 20.00
* Order By Price
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This statement produces a list of all the rows in the Product table
* where the Price column contains a value greater than 20.00, listed in
* ascending order by price.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* IF you want the list stored in decending order (from highest to lowest)
* , use the Desc operator, as shown here:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select * From Product
* Where Price > 20
* Order By Price Desc
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Table Adapter Queries
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* A table adapter query in an SQL statment that is stored in a table apter and
*  can be executed simply by calling a method. For ex, all table
*  adapters contain a queery that files a dataset with data from a table.
*  That query can be executeted by calling the table adapter's Fill method. 
*  When you place adata-bound control,  such as a DataGridView control,
*  on a form, a Load event handler that calls the table adapter's Fill
*  method is automatically created for the form.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Let's look at an example. In Visual Studio, open the Multiform
* Products project that you created in Tutorial 12-5, and open source
* code for the MainForm form. Look at the form's Load ecent handler,
* which is shown here (the comment that appears in line 3 has been
* exluded )
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* private void MainForm_Load(object sender, EventArgs e)
* {
*   //TODO: THis line of code loads data into...
*   this productTableAdapter.Fill(this.productDataSet.Product);
* }
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The statement in line 4 calls the productTAbleAdapter's Fill method,
* passing dataset's Product table as an argument. The Fill method fo;;s
* the dataset table with rows that are retuened from an SQL statement.
* Now let's look at the SQL statement that is executed by the Fill method.
* In the Soultion Explorer, you should see an entry named 
* ProductDataSet.xsd, as shown in Figure 12-70. This us the schema
* definition file that describes the contents of the productDataSet.
* Double-click the ProductDataSet.xsd entry to opern it in an editor
* window, as shown in Figure 12-71. The area at the top of the diagram
* shows the columns that are indluded on the dataset, and the area at
* the bottom shows the table adapter query methods.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-71 ProductDataSet.xsd opened for editing
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Right-click the area that reads Fill, GetData() and, as shown in 
* Figure 12-27, select Configureation  from the pop-up menu. This displays
* the tableAdapterConfiguation Wizard window shown in Figure 12-73. Notice
* the SQL query that appears in TableAdapter Configuration Wizard window
* . The dataset is filled with the rows that are returned by this
* Select statement. If you were to change the Select statement, for
* instance, by adding a Where clause and then by clicking the Finish
* button, the data that is initally displayed in the DataGridView
* control would change accordingly. When you are sinished examining 
* the window, click the Cancel button to close it.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-27 Select Configure from the pop-up menu
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-73 TableAdapter Configuartaion Wizrd
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Note: Notice that the table named in the Select statement is preceded
* with the dbo.prefix. The prefix dbo stand for database owner and is
* part of an SQL Server naming convention. In our example program, the
* dbo prefix is optional.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Adding New Table Adapter Queries
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* You can add your own SQ: queries to a table adapter and call them
* from your C# code. In Tutorial 12-6, you add several queries to a 
* table adapter, and then you create button on the application's form 
* that executes those queries.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Tutorial 12-6: Creating the Product Queries Application
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In this tutorial, you create an application that displays the Product
* table from the ProductDB.mdf database in a DAtaGridView control. You
* also add two SQL quries to the table adapter. The queries perform the
* following:
* 
*   *Return all the rows, sorted by price in ascending order
*   
*   *Return only the rows with more than 100 units on hand
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Then, you create buttons on the applications form that executes the 
* queries.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Note: This is the same procedure that you performed in Steps 3-11
* Tutorial 12-3.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-74 The application's form
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-75 Adding a query to the table adapter
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Note it is possible that you will see Add Query... on the pop-up menu
* instead of Add. If that is the case, simply click Add Query...
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-76 TableAdapter Query Configuration Wizard-Choose a Command
* Type
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-77 TableAdaper Query Configuration Wizard-Choose a Query
* Type
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-78 TableAdapter Query Configuration Wizard-Specify a SQL
* SELECT statement
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-79 TableAdapter Query Configuration Wizard-Choose Methods to
* Generate
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-80 TableAdapter Query Configuration Wizard-Wizard Results
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-81 The FillByPrice() method appearing in the schema
* definition file
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Note: After you created a table adapter query, you can edit it by
* right-clicking its entery in the dataset schema definition and then
* clicking Configure...from the pop-up menu.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-82 TableAdapter Query Configuration Wizard-Specify a SQL
* SELECT statement
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-83 TableAdapter Query Configuration Wizard-Choose
* Methods to Generate
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-84 The FillByPrice() and FillByUnits() methods as they appear
* in the schema definition file
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-85 Button controls added to the form
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Program 12-4 Completed Form1 code in the Product Queries application
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* namespace Product_Queries
* {
*   public partial class Form1 : Form
*   {
*       public Form1()
*       {
*           InitializedComponent();
*       }
*       
*       private void productBindingNavigatorSaveItem_Click(object sender, EventArgs e)
*       {
*           this.Validate();
*           this.productBindingSource.EndEdit();
*           this.tableAdapterManager.UpdateAll(this.producyDataSet);
*       }
*       
*       // I LOVE THIS SYNTAX
*       private void Form1_Load(object sender, EventArgs e)
*       {
*           //TODO: This line of code loads data into the ...
*           
*           this.productTableAdapter.Fill(this.productDataSet.Product);
*       }
*       
*       private void sortByPriceButton_Click(object sender, EventArgs e)
*       {
*           this.productTableAdapter.Fill(this.productDataSet.Product);
*       }
*       
*       private void unitsGreater100Button_Click(object sender, EventArgs e)
*       {
*           this.productTableAdapter.Fill(this.productDataSet.Product);
*       }
*   }
* }
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* SQL Math Functions
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* SQL provides several functions for performing calculating. For ex,
* the Avg function calculate the average value in a particaular colunm.
* Here is an example Select statemet using the Avg function:
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Select Avg(Price) From Product
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* This statement produces a single value: the average of all the values
* in the Price column. Because we did not use a Where clause, it uses 
* all the rows in the Product table in the calculation.
* Here is an example that calculates the average price of all the items 
* having a product number begins with "20":
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Select Avg(Price)From Product Where Product Number LIKE '20%'
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Another of the mathermatical function is Sun, which calculates the
* sum of a colum's values. The following statement, which is probably
* not very useful, calculates the sum of the values in the Price column:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select Sum(Price) From Product
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
*The Min and Max functions determine the minimum and maximum values found
*in a column. The following statement gives the minimum value in the Price
*column:
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Select Min(Price) From Product
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* The following statement gives the maximum value in the Price column:
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
*   Select Max(Price) from Product
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* The Count function can be used to determine the number of rows in a
* table, as demonstrated by the following statement:
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Select Count(*) From Product
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* The * simply indicates that you want to count entire rows. Here is
* another example, which gives the number of items with a price greater
* than 50.0:
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Select Count (*) From Product Where Price > 50.0 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In Tutorial 12-7, you will add another query to the table adapter in 
* the Product Queries application. The new query will display average
* price of all the items in the database.
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Tutorial 12-7: Creating the Product Queries Application
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* In this tutorial, you add a query to the Product Queries application
* that returns the average price of all the items in the Profuct table.
* You also add a button to the application's form that executes the query
* and displays its result.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-86 TableAdapter Query Configuration Wizard-Specity a SQL
* SELECT statement
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Figure 12-87 TableAdapter Query Configuration Wizard-Choose Function 
* Name
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Figure 12088 The AveragePrice() method as it appears in the schema
* definition file 
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Figure 12-89 The averagePriceButton control added to the from
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Program 12-5 Completed Form1 code in the Product Queries application
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* namespace Product_Queries
* {
*       public partial Slass Form1 : Form
*       {
*           public Form1()
*           {
*               InitializedComponent();
*           }
*           
*           private void productBinding NavigatorSaveItem_Click(object sender, EventArgs e)
*           {
*                this.Validate();
*                this.productBindingSource.EndEdit();
*                this.tableAdapterManager.UpdateAll(this.productDataSet);
*           }
*           
*           private void Form_Load(object sender, EventArgs e)
*           {
*               //TODO: This line of code loads data into the...
*               
*               this.productTableAdapter.Fill(this.productDataSet.Product);
*           }
*           
*           private void sortByPriceButton_Click(object sender, EventArgts e)
*           {
*              this.productTableAdapter.Fill(this.productDataSet.Product);
*           }
*           
*           private void unitsGreater100Button_Click(object sender, EventArgs e)
*           {
*               this.productTableAdapter.FillByUnits(this.productDataSet.Product);
*           }
*           
*           private void averagePriceButton_Click(object sender,
*           EventArgs e)
*           {
*               // Declare a variable to hold the average
*               
*               decimal averagePrice;
*               
*               // Get the average price
*               averagePrice = (decimal) this.productTableAdapter.AveragePrice();
*               
*               // Display the average price.
*               MessageBox.Show("Average price of all items: " + averagePrice.ToString("c"));
*           }
*       }
* }
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Query Parameters
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* SQL queries can accept arguments. Just as with regular methods, 
* arguments are passed into parameter variables. In an SQL statement, a
* parameter variable begins with the @ symbol. The following statement
* show an example:
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Select * Form Product Where Price < @priceValue
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* This statement retrieves all the rows in which the Price column in 
* less than the value of the PriceValue parameter. Here is another
* example:
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Select * From Product
* Where Price < @priceValue and Units_On_Hand < @unitsValue
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* This statement retrieves all the rows in which the Price column is 
* less than the valkue of the @paiceValie parameter and the
* Units_On_Hand column is less than the value of the @unitsValue
* parameter.
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* When you call the table adapter method for an SQL query, you have to
* pass arguments for any parameters that are used in the query. In 
* Tutorial 12-8, you create an application that gets a value from the 
* user and passes that value as an argument to an SQL query.
* 
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Tutorial 12-8: Creating the Product Search Application
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* In this tutorial, you create an application that displays the Product
* table from the ProductDB.mdf database in a DataGridView control. The
* user will be able to enter a value into a text box and search for all
* items that contain that value in their description.
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Figure 12-90 The application's form
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-91 TableAdaoter Query Configuation Wizard-Specify a SQL
* SELECT statement
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Figure 12-92 TableAdapter Query Configuration Wizard-Choose Methods
* to Generate
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* Figure 12-93 The SearchDesc method appearing in the schema definition
* file
* /////////////////////////////////////////////////////////////////////
*
* /////////////////////////////////////////////////////////////////////
* Program 12-6 Completed Form1 code in the Product Search application
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* namespace Product_Search
* {
*   public partial class Form1 : Form
*   {
*       public Form1()
*       {
*           InitializeComponent();
*       }
*       
*       private void productBindingNavigattorSaveItem_Click(object sender, EventArgs e)
*       {
*           this.Validate();
*           this.productBindingSource.EndEdit();
*           
*           this.tableAdapterManager.UpdateAll(this.productDataSet);
*       }
*       
*       private void Form1_Load(object sender, EventArgs e)
*       {
*           // TODO: This line of code loads data into the...
*           
*           this.productTableAdapter.Fill(this.productDataSet.Product);
*       }
*       
*       private void searchButton_Click(object senderm EverntArgs e)
*       {
*           this.productTableAdapter.SearchDesc(this.productDataSet.Product, searchTextBox.Text);
*       }
*       
*       private void showAllButton_Click(object sender, EventArgs e)
*       {
*           this.productTableAdapter.Fill(this.productDataSet.Product);
*       }
*   }
* }
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
* 
* /////////////////////////////////////////////////////////////////////
*/