using System;

namespace Chapter3ProcessingData
{
    static void Main(string[] args)
    {
        
    }
}

/* //////////////////////////////////////////////////////////////////////////
 *                      Chapter 3 Processing Data
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 *                      Topics
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 * 3.1 Reading Input with TextBox Controls
 * 3.2 A First Look at Variables
 * 3.3 Numeric Data Types and Variables
 * 3.4 Performing Calculations
 * 3.5 Inputting and Outputting Numeric Values
 * 3.6 Formatting Numbers with ToString Method
 * 3.7 Simple Exception Handling
 * 3.8 Using Named Constrants
 * 3.9 Declaring Variables as Fields
 * 3.10 Using the Math class
 * 3.11 More GUI Details
 * 3.12 Using the Debugger to Locate Logic Errors
 * //////////////////////////////////////////////////////////////////////////
 * Concept The TextBox control is a rectangular area that can accept
 * keyboard input from the user.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * Many of  the programs that you will form this point forward will require
 * the user to enter data.
 * The data entered by the user will then be used in some sort of operation.
 * One of the primary controls that you will use to get data from the user
 * is the TextBox control.
 * 
 * //////////////////////////////////////////////////////////////////////////
 * A TextBox control appears as a rectangular area on a form. When the
 * application is running, the user can type into a TextBox control.
 * The program can then retrieve the text that the user entered and
 * use that text in any necessary opertaions.
 * //////////////////////////////////////////////////////////////////////////
 * IN the Toolbox, the TextBox tool is located in teh Common Controls group.
 * When you double-click the tool, a TextBox control is created on the form,
 * as shown in Figure 3-1. When you create TextBox controls, they are
 * sutomatically given default names such as textBox1, textBox2, and so
 * forth. As you learned in Chapter 2, you should always change a controls
 * default name to something more meaningful.
 * //////////////////////////////////////////////////////////////////////////
 * When the user types into a TextBox control, the text is stored in the
 * control's Text property.
 * //////////////////////////////////////////////////////////////////////////
 * Note When you retrive the contrents of the Text property, you always
 * get a string. Any operation that can be preformed on a string can be
 * prefomed on a control's Text property.
 * //////////////////////////////////////////////////////////////////////////
 * Let's look at an example. Make sure you have downloaded the student
 * sample proghrams from the book's compantion Web site
 * (at www.peasrsionHighered.com/gaddis). In the Chap03 folder, you will find
 * a project named TextBox Demo. Figure 3-2 shows the form, with most of
 * the control names epecified, and Figure 3-3 shows the form's code. 
 * (in Figure 303, to conserve space on the page, we have scrolled past 
 * the using directives that appear at the top of the code file.)
 * //////////////////////////////////////////////////////////////////////////
 * Notice in Figure 3-3 that the readInputButton control's Click
 * event handler performs the following assignment statement:
 * //////////////////////////////////////////////////////////////////////////
 * outputLabel.Text = nameTextBox.Text;
 * //////////////////////////////////////////////////////////////////////////
 * This statement assigns the value of the nameTextBox control's Text
 * property to the outputLabel contro's Text property. In other words, 
 * it gets any text that has been entered by tge user into the nameTextBox 
 * control and displays it in the outputLAbel control. IF you run the 
 * application, Figure3-4 shows an example of how the form appears after
 * you have enterd Kayhrym Smith and clicked the readInputButton control.
 * //////////////////////////////////////////////////////////////////////////
 * Clearing the Contents of a TextBox Control
 * //////////////////////////////////////////////////////////////////////////
 * You can clear the contents of a TextBox control in the same way that you
 * clear the contents of a Label control: you assign an empty string("") to
 * control's Text property. For example, the following statment clears the 
 * contrnts of the nameTextBox control:
 * //////////////////////////////////////////////////////////////////////////
 * When this statement executes, the nameTExtBox control will appear empty on the application's form.
 * //////////////////////////////////////////////////////////////////////////
 * 
 * //////////////////////////////////////////////////////////////////////////
 *                      3.2 A First Look at Variables
 * //////////////////////////////////////////////////////////////////////////
 * Concept A variable is a storeage location in memory that is represented by a name.
 * //////////////////////////////////////////////////////////////////////////
 * Most programs store data in the computer's memory and preform operations on
 * that data. For example, consider the typical online shopping experiencce:
 * you browse a Web site and add the items that you want to purchase to the
 * shopping cart. As you add items to the shopping cart, data about those
 * items is stored in memory. Then,m when you click the checkout button,
 * a program running on the Web site's computer calculates the cost of 
 * all the items you have in your shopping cart, applicable sales taxes,
 * chipping costs, and the total of all these charges. When the program
 * performs these calculations, it stores the result im the computer's memory.
 * //////////////////////////////////////////////////////////////////////////
 * Programs use variables to store data in memory. A variable is a storage
 * location in memory that is represented by a name. For example, a program
 * that manages a compan'y customer mailing lisyt might use a variable named
 * lastName to hold a customer's last name, a variable named firstName to
 * hold the customer's first name, a variavbe named address to hold the
 * customer's mailing address, and so forth.
 * 
 * #//////////////////////////////////////////////////////////////////////////
 * In C#, you must declare a variable in a program before you can use it to 
 * store data. You do this with a variable declaration, which specifies two
 * things about the variable:
 * 
 * 1. The variable's data type, which is the type of data the variable woll hold.
 * 
 * 2. The variable's name // Otherwise know as a memory address
 * //////////////////////////////////////////////////////////////////////////
 * A variable declaration statement is written in the general format:
 * //////////////////////////////////////////////////////////////////////////
 * DataType VAriableName
 * #//////////////////////////////////////////////////////////////////////////
 * Let's take a closer look at each of these.
 * //////////////////////////////////////////////////////////////////////////
 * Data Type
 * //////////////////////////////////////////////////////////////////////////
 * A variable's data type indicates the type of data that the variable will hold.
 * BEfore you declare a variable, you need to think about the type of value that
 * will be stored in the variable. For example, will the variable hold a string or a number? IF it will hold a number, what kind of number will it be, an integer or a real number? When you have determined the kind of data that the variable will hold, you select one of the data types that C# provides for a variable.
 * //////////////////////////////////////////////////////////////////////////
 * The C# language provides many data types for storing fundamental types of data, such as strings, integers, and real numbers. These data types are known as primitive data types. We will look at several of them in this chapter.
 *
 *#//////////////////////////////////////////////////////////////////////////
 * VAriable Name
 * //////////////////////////////////////////////////////////////////////////
 * A variable name identifies a variable in the programn code. When namin
 * g a variable, you should always choose a meaningful name that indicates
 * what the variable is used for. For example, a variable that holds teh
 * temperture might be named temperature, and a variables short, nondescript
 * names such as x or b2, but names such as thses give no clue as to the
 * purpose of the variable.
 * //////////////////////////////////////////////////////////////////////////
 * In addition, there are some specific rules that you must follow when 
 * naming a variable. The same rules for identifiers that apply to control 
 * names also apply to variable names. We discussed these rules in CHapter
 * 2, but we review them now:
 * //////////////////////////////////////////////////////////////////////////
 *      * The first character must be one of the letters a through z
 *      or A through Z or an underscore character( _ ).
 *      
 *      * After the first character, you may use the letters a through z or
 *      A through Z, the digits 0 through 9, or underscores.
 * //////////////////////////////////////////////////////////////////////////
 * When nameing variables, we use the same camelCase naming convention that
 * we introduced in Chapter 2 for control names. For example, if we are
 * declaring a variable to hold an employee's gross pay, we might name it
 * grossPay. Or, if are declaring a variable to a customer number,
 * we might name it customerNumber.
 * #//////////////////////////////////////////////////////////////////////////
 * string Variables
 * //////////////////////////////////////////////////////////////////////////
 * The first primative data type we consider is the string data type. A variable of the string data type can hold any string of characters, such as person's name, address,password, and so forth. Here is an example of a statement that declares a string variable named productDescription:
 * //////////////////////////////////////////////////////////////////////////
 * string productDescription
 * //////////////////////////////////////////////////////////////////////////
 * After the variable has been declared, you can use the assignment operator
 * (=) to store a value in the variable. Here is an  example:
 * //////////////////////////////////////////////////////////////////////////
 * productDescription = "Italian Espresso Machine";
 * //////////////////////////////////////////////////////////////////////////
 * When this statement executes, the string literal "Italian Espresso Machine"
 * os assigned to the productDescription varible. When writing an assignment
 * statement, remeber that the assignment operator assigns the value that
 * appears on its right side to the variable that appears on its left side.
 * //////////////////////////////////////////////////////////////////////////
 * Once you have assigned a value to a variable, you can use the variable
 * in other operations. For example, assume productLabel is the name of a
 * Label control. The following statement assigns the productDescription 
 * string to the productLAbel control's Text property: 
 * //////////////////////////////////////////////////////////////////////////
 * productLabel.Text = productDescription:
 * //////////////////////////////////////////////////////////////////////////
 * After this statement executes, the string that is stored in the
 * productDescription variable is displayed in the productLabel control.
 * The following statement shows another example:
 * //////////////////////////////////////////////////////////////////////////
 * MessageBox.SHow(productDescription);
//////////////////////////////////////////////////////////////////////////
///When this statement executes, the string that is stored in the productDescription variable is displayed in a message box.
/// 
/// #//////////////////////////////////////////////////////////////////////////
/// String Concatenation 
/// //////////////////////////////////////////////////////////////////////////
/// A common operation that performed on strings is concatenation, or appending 
/// one string to the end of another string. IN C# you ise the + operator to
/// concatenate strings. The + operator produces a string that is the
/// combination of the two strings used as its operands. The following
/// code shows an example:
/// //////////////////////////////////////////////////////////////////////////
/// string message;
/// message = "HEllo" +"world";
/// messageBox.Show(message);
/// #//////////////////////////////////////////////////////////////////////////
/// The first statement declares a string variable named message. The second 
/// statement combines the strings "Hello " and "world" to produce the string
/// "Hello world". The string "Hello world" is then assigned to the message
/// variable. The third statement displays the contents of the message
/// variable in a message box. When the message box is displayed,
/// it shows the string Hello world.
/// //////////////////////////////////////////////////////////////////////////
/// Let's look at an application that further demonstrates string concatenation.
/// Figure 3-5 shows the form , with most of the control names specified, and 
/// Figure 3-6 shows the form's code. (IN Figure 3-6, to conserve space on
/// the page, we have scrolled past using directives that appear at the 
/// top of the code file)
/// //////////////////////////////////////////////////////////////////////////
/// IN Figure 3-6, three statements in the showNAmeButton_Click event handler are pointed out:
/// //////////////////////////////////////////////////////////////////////////
/// 1 This statement is a variable declaration. It declars a string variable named fullName.
/// //////////////////////////////////////////////////////////////////////////
/// 2
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// 
/// 
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// 
/// 
/// //////////////////////////////////////////////////////////////////////////
/// 
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////
/// 
/// 
/// 
/// 
/// 
//////////////////////////////////////////////////////////////////////////