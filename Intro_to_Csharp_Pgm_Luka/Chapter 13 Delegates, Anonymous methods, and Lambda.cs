/* /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
    Chapter 13 Delegates, Anonymous Methods, and Lambda Expressions
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Topics:
 * 13.1 Delegates
 * 13.2 Anoymous Methods
 * 13.3 Lambda Expressions
 * 13.4 Built-In Delegates: Action, Func, and Predicate
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 13.1 Delegates
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Concept: A delegate is an object that works like a reference variable
 * that is refering to a method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * YOu have learned that reference variables refer to objects. When you 
 * create an object in memory, you can assign that object to a reference
 * variable, and then use the reference variable to work with the object.
 * In this section you will learn about delegates, which allow you to create
 * reference variables that can refer to methods. When a delegate referes
 * to a method, you can use the delegate to call the method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * private void DisplayMessage(string str)
 * {
 *  MessageBox.Show(str);
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Suppose you want to assign this method to a delegate, and then that 
 * delegate to call the method. First, you must declare a delegate
 * type. In this step you are not creating an actual delegate, but you 
 * describing the method that the deglegate can refer to. You do this 
 * by specifying the method's return type and its parameters. Here
 * is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate void MyDelegate(string str);
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This declaration begins with the keyword degate, followed by code that
 * looks like a method header, terminated with a semicolon. This code 
 * declares that we are creating a delegare type named MyDelegate that can
 * reference any void method that has one parameter, a string. (The name
 * of the parameter is irrelevant.)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Once the delegate type is declared, you can use it to create an actual
 * delegate. (This step is often described as creating an instance of the
 * delegate type.) The delegate can reference any method that has a return
 * type and parameter list matching that of the delegate type. Here is an 
 * example, using the MyDelegate type we previously created:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * MyDelegate Display = DisplayMessage;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This statement creates a delegate named Display, and it assigns the 
 * DisplayMessage method to the delegate. As a result, you can use the
 * Display delegate to call the DisplayMessage method. Here is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Display("Hello World");
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 1. Declare a delegate type
 * 
 * 2. Create an instance of the delegate type and make it reference 
 * a method.
 * 
 * 3.Use the delegate to call the method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figue 13-1 illustrates how a delegate type delaration, a method, and
 * a statement that creates an instance of the delegate type work together.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 13-1 Creating and using a delegate
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Let's look at a complete application that demonstrates this code.
 * Program 13-1 shows the Form1 code for the DelegateDemo application.
 * Figure 13-2 shows the application's form, and the message box that
 * appears when the user clicks the Button control.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 13-2 The DelegateDemo application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-1 Form1 code for the DelegateDemo application 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using System;
 * using System.Window.Form;
 * 
 * namespace DelegateDemo
 * {
 *      delegate void MyDelegate(string str);
 *      
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          private void myButton_Click(object sender, EventArgs e)
 *          {
 *              // Assign the DisplayMessage method to a delegate.
 *              MyDelegate Display = DisplayMessage;
 *              
 *              // Use the delegates to call the method.
 *              Display("Hello World");
 *          }
 *          
 *          private void DisplayMessage(string message)
 *          {
 *              MessageBox.Show(message);
 *          }   
 *      }
 *   }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In the application's code, line 6 declares the delegate type. Notice
 * that the delegate type is declared inside the application's namespace,
 * but it is not inside of any class. This is a common practice, although
 * it is possible to declare a delegate type inside of a class. Line 18
 * creates an instance of the delegate type inside of a class. Line 18
 * creates an instance of the delegate, and make it reference the 
 * DisplayMessage method. (This DisplayMessage metod appears in line 
 * 24-27.)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Reassigning a Delegate
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * A delegate can be reassigned to another method, as long as the
 * method's return type and parameter list match that of the delegate
 * type. For ex, suppose we having the followinng methods in a class:+
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * private void DisplayString(string str)
 * {
 *      MEssageBox.Show();
 * }
 * private void DisplayLength(string str)
 * {
 *  int len = str.Length;
 *  MessageBox.Show(len.ToString());
 * }
 * 
 * 
 * /////////////////////////////////////////////////////////////////////
 *
 * /////////////////////////////////////////////////////////////////////
 * The DisplayString method acepts a string and displau it in a message 
 * box, and the DisplauLength method accepts a string and displays its
 * length in a message box. Both methods return void and have one string 
 * parameter. The following selegate type is compatiable with both
 * methods:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate void WorksWithAString(string str);
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following code semonstrates how we can create one deleage to work
 * with both methods:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *      // Create a string.
 *      string mystring = "Abracadabra";
 *      
 *      // Create a delegate named StringOperation, and assign the 
 *      // DisplayString method to it.
 *      WorksWithAString StringOperation = DIsplayString;
 *      
 *      // Call the method that StringOperation references.
 *      StringOperation(myString);
 *      
 *      // Assign the DisplayLength method to the StringOperation delegate.
 *      StringOperation = DisplayLength;
 *      
 *      // Call the method that StringOperation references.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The statement in line 6 creates a de;egate named StringOperation
 * and assigns the DisplayString method to it. When line 9 executes, it
 * is the Display method that is called. Then, line 12 assigns the 
 * DisplayLEngth method to the StringOperation delegate. As a result,
 * when line 15 executes, it is DisplayLength method that is called.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Passing a Delegate to a Method
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Delegates can be passed as arguments to methods. This means that you 
 * can write a method that accepts another method as an argument. Program
 * 13-2 shows the code for DelegatePassing application, and Figure 13-3
 * shows the application's form.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-2 Form1 code for the DelegatePassing application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * namespace DelegatePassing
 * {
 *      degate void DoSomthing(ref double data);
 *      
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          ptivate void SetToZero(ref double data)
 *          {
 *              data=0;
 *          }
 *           ptivate void MakeTwice(ref double data)
 *          {
 *              data*=0;
 *          }
 *           ptivate void CutInHalf(ref double data)
 *          {
 *              data/=2;
 *          }
 *          
 *          private void ShowResult(ref double myvalue, DoSomthing MyMethod)
 *          {
 *              //Perform the action on the data.
 *              MyMethod(ref myvalue);
 *              
 *              // Display the data
 *              MessageBox.Show(myvalue.ToString());
 *          }
 *          
 *          private void demoButton_Click(object sender, EventArgs e)
 *          {
 *              // A value to work with
 *              double value = 100.0;
 *              
 *              // Create a delegate to reference MakeTwice.
 *              DoSomthing operation = MakeTwice;
 *              
 *              // Pass value and the delegate to ShowResults.
 *              ShowResults(ref value, operation);
 *              
 *              // Make the delegate reference the CutInHalf method.
 *              operation = CutInHalf;
 *              
 *              //Pass value and the delegate to ShowResult.
 *              ShowResult(ref value, operation);
 *              
 *              // Make the delegate reference the SetToZero method
 *              operation = SetToZero;
 *              
 *              // Pass value and the delegate to ShowResult.
 *              ShowResult(ref value, operation);
 *          }
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 13-3 The DelegatePassing application's form
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Let's take a closer look at the program. First, notice the code for the
 * SetToZero, MakeTwice, and CutInHalf method in line 15 throgh 28.
 * Each of these methods returns void and has a double reference
 * parameter.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In line 6 we declare a delegate type named DoSomething that specifies 
 * a void return type and a double reference parameter. So, the delegate 
 * type is compatible with SetToZero, MakeTwice, and CutInHalf methods.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The ShowResult method appears in line 30 through 37. Look at the 
 * method's parameter list. The first parameter is a double reference
 * variable name myValue. The second parameter is a DoSomthing delegate 
 * named MyMethod. When we call the ShowResult method, we have to pass
 * a double (by reference), and a DoSomthing delegate.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * inside the ShowResult method, line 33 calls the method that is referenced
 * by MyMethod delegate, passing the myvalue variable as an argument. Then
 * line 36 displays the value of myvalue in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The demoButton_Click event handler, shown in lines 39 through 61,
 * performs the following:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *Line 42 declares a double variable named value, initialized with 100.0.
 * 
 * *Line 45 creates a delegate named operation and assigns the MakeTwice
 * method to it.
 * 
 * *Line 48 calls the ShowResult method, passing the value vaiable and the 
 * operation delegate as arguments. As a result, the valur 200 is displayed
 * in a message box.
 * 
 * *Line 51 assigns the CutInHalf method to the operation delegate.
 * 
 * *Line 54 calls the ShowResult method, passing the value variable and
 * the operation delegate as arguments. As a result, the value 100 is 
 * displayed  in a message box.
 * 
 * *Line 57 assigns the SetToZero method to the operation delegate.
 * 
 * *Line 60 calls the ShowResult method, passing the value variable and
 * the operaion delegate as arguments. As a result, the value 0 is 
 * displyed in a message box.
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  Multicast Delegates
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In the previous examples, you saw how a delegate can be used to 
 * reference a method. When you invoke a delegte, the method that the
 * delegates references is executed. A delegate can also reference
 * multiple method is know as a multicast delegate. When you invoke
 * a multicast delegate, each of the method referenced by the the 
 * degegate will be executed in the order in which they were added to the
 * degate. You use the += operator to add a method to a delegate. For 
 * example, suppose you have the following methods:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * private void DisplayString(string str)
 * {
 *  MessageBox.Show(str);
 *  
 * }
 * 
 * private void DisplayLength(string str)
 * {
 *  int len = str.Length;
 *  MessageBox.Show(len.ToString());
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Suppose you also have the following delegate type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Delegate void WorksWithAString(String str)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following code semonstrates how we can create a multicast delegate
 * to invoke both methods:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  // Create a string
 *  string mystring = "Abracadabra";
 *  
 *  // Create a delegate referencing the DisplayString method.
 *  WorksWithAString StringOperation = DisplayString;
 *  
 *  // Add the DisplayLength method to the delegate.
 *  StringOperation+= DisplayLength;
 *  
 *  // Call the method that StringOperation references.
 *  StringOperation(mystring);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The statement in line 5 creates a delegate named StringOperation and
 * assigns the DisplayString method to it. Then, the statement in line 8
 * uses the += operator to add the DisplayLength method to the delegate.
 * When line 11 executes, the DisplayString method is executed first, 
 * followed by the DisplayLength method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Here are some other points to keep in mind regading multicast 
 * delegates:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * * You can use the -= operator to remove a method from a multicast
 * deglegate. using the previously shown example, we could remove the
 * DisplayLength method from the StringOperation delegate with the 
 * statement:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * StringOperation -= DisplayLength;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * * If a multicast delegate references methods that retrun a value
 * (non-void methods), the delegate will return only the value that is 
 * returned from the last method that is executed. All other values 
 * returned in the invocation chain will be lost. In practice, it is 
 * best if multicast delegates reference only void methods.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 13.2 Anonymous Methods
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Concept: A delegate can refer to an anonymous method, which is a
 * method that has no name.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * An anonymous method is a method that has no name. In C#, delegates
 * give you the ability to create anonymous methods. For ex, suppose we 
 * have the following delegate type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate void WorksWithAString(string str);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Given this type declaration, the following code creates a delegte
 * that references an anonymous method:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * WorksWithAString Display = delegate(string str)
 * {
 *      MEssageBox.Show(str);
 * };
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This code creates a delegate named Displayed. The Display Delegate is
 * of the WorkWithAString type. The Display delegate referecnes an
 * anonymous method that has a string parameter, so when we call the
 * method, we must pass a string argument to it, as shown here:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Display("Calling the anonymous method.");
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This statement uses the Display delegate to call the anonymous method
 * , passing the string "Calling the anonymous method" as an argument.
 * The anonymous method displays the string in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Let's look at a complete application that demonstrates anonymous 
 * methods. Program 13-3 shows the Form1 code for the AnonymousMethod
 * application.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *In line we declare a deglegate type named IntCalculator that specifies
 * an int return type and two int parameters.
 * 
 * * In line 19 through 22 we create an IntCalculator deegate named Sum,
 * referencing an anonymous method that accepts two int argumets and 
 * returns their sum.
 * 
 * * In lines 24 through 27 we create an IntCalculator delegate named
 * Multiply, referencing an anonymous method that accepts two int
 * arguments and returns their product.
 * 
 * *In line 29 we call the method referenced by the Sum delegate,
 * passing the arguments 1 and 2, and assigning the return value
 * to the result variable. In line 30 we display the result variable
 * in a message box.
 * 
 * *In line 32 we call the method referecned by the Multiply delegate,
 * passing the arguments 2 and 4, and assigning the return value to
 * the result variable. in line 33 we display the return variable in a 
 * message box.
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-3 From1 code for the AnonymousMethod application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * namespace AnonymousMethof
 * {
 *      delegate int IntCalculator(int a, int b);
 *      
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          private void demoButton_Click(object sender, EventArgs e)
 *          {
 *              int result;
 *              
 *              IntCalculator Sum = delegate(int a, int b)
 *              {
 *               return a + b;   
 *              };
 *              
 *              IntCalculator Multiply = delegate(int a, int b)
 *              {
 *                  return a * b;
 *              };
 *              
 *              result = Sum(1,2);
 *              MessageBox.Show("1+2=" result.ToString());
 *              
 *              result = Multiply(1,4);
 *              MessageBox.Show("2*4=" result.ToString());
 *              
 *          }
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 13.3 Lambda Expressions
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Concept: A lambda expression is a concise expression that creates
 * an anonymous method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * A lambda expression is a shorrcut technique for writing an anonymous
 * methods. Here is general format of a simple lambda expression that
 * accepts one argument, and returns a value:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * parameter => expression
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In this general format, the lambda expression begins with a parameter
 * variable, followed by the lambda operator(=>), followed by an
 * expressionn that has a value. Here is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * x => x * x
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The x that appears on the left side of the => operator is the name of
 * a parameter variable, and the expression x * X.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * For ex, suppose we have the following delegate type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate int IntOperation(int x);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The name of the delegate type is IntOperation, and it specifies a
 * return type of int, and one int parameter. Also, suppose that we want
 * to create a delegate of the IntOperation type that references a method
 * that returns the square of x. The following code shows how we can use
 * a lambda expression to create the delegate:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * IntOperation Square = x => x  * x;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * On the left side of the - operator, we declare an IntOperatrion delegate
 * named Square. One the right side of the = operator, we have a lambda
 * expression that creates an anonymous method with the following 
 * characterististics:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *    The parameter x that is used in the lambda expression represents
 * the argument that is passed to the method. We do not have to specify
 * the data type of x because the compiler will determine it. Because
 * the IntOperation delegate type specifies an int parameter, the x 
 * parameter in the lambda expression will automatically becomes an int.
 * 
 * *The expression x * x is the value that is returned from the method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following table shows the lambda expression on the left, and 
 * equivalent code on the right that explicity creates an anonymous 
 * method. You can see that the lambda expression is must more concise 
 * than the anontmous method declaration.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Lambda Expression                    Anonymous Method
 * IntOperation Square = x => x * x;    IntOperation Square = delegate(int x)
 *                                      {
 *                                          return X * X;
 *                                      };
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  Let's look at a complete application that demonstrates the use of a
 *  lambda expression. Program 13-4 shows the Form1 code for the 
 *  LambdaDemo application.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *    In Line 6 we declare a delegate type named IntOperation that specifies
 * an int return type and an int parameter.
 * 
 * *In line 18 we declare an IntOperation delegate named Square, referencing
 * an anonymous method with an int parameter named x. The method returns the
 * valie of x * x/
 * 
 * *In line 20 we call the method referenced by the Square delegate, passing
 * the argument 5, and assigning the return value of the result variable.
 * In line 21 we display the result variable in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-4 Form1 code for the LamdaDemo application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using
 * 
 * name
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 */