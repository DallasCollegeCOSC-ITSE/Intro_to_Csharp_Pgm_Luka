/* /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
    Chapter 13 Delegates, Anonymous Methods, and Lambda Expressions
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Topics:
 * 13.1 Delegates
 * 13.2 Anoymous Methods
 * 13.3 Lambda Expressions
 * 13.4 Built-In Delegates: Action, Func, and Predicate
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 13.1 Delegates
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Concept: A delegate is an object that works like a reference variable
 * that is refering to a method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * YOu have learned that reference variables refer to objects. When you 
 * create an object in memory, you can assign that object to a reference
 * variable, and then use the reference variable to work with the object.
 * In this section you will learn about delegates, which allow you to create
 * reference variables that can refer to methods. When a delegate referes
 * to a method, you can use the delegate to call the method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * private void DisplayMessage(string str)
 * {
 *  MessageBox.Show(str);
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Suppose you want to assign this method to a delegate, and then that 
 * delegate to call the method. First, you must declare a delegate
 * type. In this step you are not creating an actual delegate, but you 
 * describing the method that the deglegate can refer to. You do this 
 * by specifying the method's return type and its parameters. Here
 * is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate void MyDelegate(string str);
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This declaration begins with the keyword degate, followed by code that
 * looks like a method header, terminated with a semicolon. This code 
 * declares that we are creating a delegare type named MyDelegate that can
 * reference any void method that has one parameter, a string. (The name
 * of the parameter is irrelevant.)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Once the delegate type is declared, you can use it to create an actual
 * delegate. (This step is often described as creating an instance of the
 * delegate type.) The delegate can reference any method that has a return
 * type and parameter list matching that of the delegate type. Here is an 
 * example, using the MyDelegate type we previously created:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * MyDelegate Display = DisplayMessage;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This statement creates a delegate named Display, and it assigns the 
 * DisplayMessage method to the delegate. As a result, you can use the
 * Display delegate to call the DisplayMessage method. Here is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Display("Hello World");
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 1. Declare a delegate type
 * 
 * 2. Create an instance of the delegate type and make it reference 
 * a method.
 * 
 * 3.Use the delegate to call the method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figue 13-1 illustrates how a delegate type delaration, a method, and
 * a statement that creates an instance of the delegate type work together.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 13-1 Creating and using a delegate
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Let's look at a complete application that demonstrates this code.
 * Program 13-1 shows the Form1 code for the DelegateDemo application.
 * Figure 13-2 shows the application's form, and the message box that
 * appears when the user clicks the Button control.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 13-2 The DelegateDemo application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-1 Form1 code for the DelegateDemo application 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using System;
 * using System.Window.Form;
 * 
 * namespace DelegateDemo
 * {
 *      delegate void MyDelegate(string str);
 *      
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          private void myButton_Click(object sender, EventArgs e)
 *          {
 *              // Assign the DisplayMessage method to a delegate.
 *              MyDelegate Display = DisplayMessage;
 *              
 *              // Use the delegates to call the method.
 *              Display("Hello World");
 *          }
 *          
 *          private void DisplayMessage(string message)
 *          {
 *              MessageBox.Show(message);
 *          }   
 *      }
 *   }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In the application's code, line 6 declares the delegate type. Notice
 * that the delegate type is declared inside the application's namespace,
 * but it is not inside of any class. This is a common practice, although
 * it is possible to declare a delegate type inside of a class. Line 18
 * creates an instance of the delegate type inside of a class. Line 18
 * creates an instance of the delegate, and make it reference the 
 * DisplayMessage method. (This DisplayMessage metod appears in line 
 * 24-27.)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Reassigning a Delegate
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * A delegate can be reassigned to another method, as long as the
 * method's return type and parameter list match that of the delegate
 * type. For ex, suppose we having the followinng methods in a class:+
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * private void DisplayString(string str)
 * {
 *      MEssageBox.Show();
 * }
 * private void DisplayLength(string str)
 * {
 *  int len = str.Length;
 *  MessageBox.Show(len.ToString());
 * }
 * 
 * 
 * /////////////////////////////////////////////////////////////////////
 *
 * /////////////////////////////////////////////////////////////////////
 * The DisplayString method acepts a string and displau it in a message 
 * box, and the DisplauLength method accepts a string and displays its
 * length in a message box. Both methods return void and have one string 
 * parameter. The following selegate type is compatiable with both
 * methods:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate void WorksWithAString(string str);
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following code semonstrates how we can create one deleage to work
 * with both methods:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *      // Create a string.
 *      string mystring = "Abracadabra";
 *      
 *      // Create a delegate named StringOperation, and assign the 
 *      // DisplayString method to it.
 *      WorksWithAString StringOperation = DIsplayString;
 *      
 *      // Call the method that StringOperation references.
 *      StringOperation(myString);
 *      
 *      // Assign the DisplayLength method to the StringOperation delegate.
 *      StringOperation = DisplayLength;
 *      
 *      // Call the method that StringOperation references.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The statement in line 6 creates a de;egate named StringOperation
 * and assigns the DisplayString method to it. When line 9 executes, it
 * is the Display method that is called. Then, line 12 assigns the 
 * DisplayLEngth method to the StringOperation delegate. As a result,
 * when line 15 executes, it is DisplayLength method that is called.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Passing a Delegate to a Method
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Delegates can be passed as arguments to methods. This means that you 
 * can write a method that accepts another method as an argument. Program
 * 13-2 shows the code for DelegatePassing application, and Figure 13-3
 * shows the application's form.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-2 Form1 code for the DelegatePassing application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * namespace DelegatePassing
 * {
 *      degate void DoSomthing(ref double data);
 *      
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          ptivate void SetToZero(ref double data)
 *          {
 *              data=0;
 *          }
 *           ptivate void MakeTwice(ref double data)
 *          {
 *              data*=0;
 *          }
 *           ptivate void CutInHalf(ref double data)
 *          {
 *              data/=2;
 *          }
 *          
 *          private void ShowResult(ref double myvalue, DoSomthing MyMethod)
 *          {
 *              //Perform the action on the data.
 *              MyMethod(ref myvalue);
 *              
 *              // Display the data
 *              MessageBox.Show(myvalue.ToString());
 *          }
 *          
 *          private void demoButton_Click(object sender, EventArgs e)
 *          {
 *              // A value to work with
 *              double value = 100.0;
 *              
 *              // Create a delegate to reference MakeTwice.
 *              DoSomthing operation = MakeTwice;
 *              
 *              // Pass value and the delegate to ShowResults.
 *              ShowResults(ref value, operation);
 *              
 *              // Make the delegate reference the CutInHalf method.
 *              operation = CutInHalf;
 *              
 *              //Pass value and the delegate to ShowResult.
 *              ShowResult(ref value, operation);
 *              
 *              // Make the delegate reference the SetToZero method
 *              operation = SetToZero;
 *              
 *              // Pass value and the delegate to ShowResult.
 *              ShowResult(ref value, operation);
 *          }
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 13-3 The DelegatePassing application's form
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Let's take a closer look at the program. First, notice the code for the
 * SetToZero, MakeTwice, and CutInHalf method in line 15 throgh 28.
 * Each of these methods returns void and has a double reference
 * parameter.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In line 6 we declare a delegate type named DoSomething that specifies 
 * a void return type and a double reference parameter. So, the delegate 
 * type is compatible with SetToZero, MakeTwice, and CutInHalf methods.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The ShowResult method appears in line 30 through 37. Look at the 
 * method's parameter list. The first parameter is a double reference
 * variable name myValue. The second parameter is a DoSomthing delegate 
 * named MyMethod. When we call the ShowResult method, we have to pass
 * a double (by reference), and a DoSomthing delegate.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * inside the ShowResult method, line 33 calls the method that is referenced
 * by MyMethod delegate, passing the myvalue variable as an argument. Then
 * line 36 displays the value of myvalue in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The demoButton_Click event handler, shown in lines 39 through 61,
 * performs the following:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *Line 42 declares a double variable named value, initialized with 100.0.
 * 
 * *Line 45 creates a delegate named operation and assigns the MakeTwice
 * method to it.
 * 
 * *Line 48 calls the ShowResult method, passing the value vaiable and the 
 * operation delegate as arguments. As a result, the valur 200 is displayed
 * in a message box.
 * 
 * *Line 51 assigns the CutInHalf method to the operation delegate.
 * 
 * *Line 54 calls the ShowResult method, passing the value variable and
 * the operation delegate as arguments. As a result, the value 100 is 
 * displayed  in a message box.
 * 
 * *Line 57 assigns the SetToZero method to the operation delegate.
 * 
 * *Line 60 calls the ShowResult method, passing the value variable and
 * the operaion delegate as arguments. As a result, the value 0 is 
 * displyed in a message box.
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  Multicast Delegates
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In the previous examples, you saw how a delegate can be used to 
 * reference a method. When you invoke a delegte, the method that the
 * delegates references is executed. A delegate can also reference
 * multiple method is know as a multicast delegate. When you invoke
 * a multicast delegate, each of the method referenced by the the 
 * degegate will be executed in the order in which they were added to the
 * degate. You use the += operator to add a method to a delegate. For 
 * example, suppose you have the following methods:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * private void DisplayString(string str)
 * {
 *  MessageBox.Show(str);
 *  
 * }
 * 
 * private void DisplayLength(string str)
 * {
 *  int len = str.Length;
 *  MessageBox.Show(len.ToString());
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Suppose you also have the following delegate type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Delegate void WorksWithAString(String str)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following code semonstrates how we can create a multicast delegate
 * to invoke both methods:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  // Create a string
 *  string mystring = "Abracadabra";
 *  
 *  // Create a delegate referencing the DisplayString method.
 *  WorksWithAString StringOperation = DisplayString;
 *  
 *  // Add the DisplayLength method to the delegate.
 *  StringOperation+= DisplayLength;
 *  
 *  // Call the method that StringOperation references.
 *  StringOperation(mystring);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The statement in line 5 creates a delegate named StringOperation and
 * assigns the DisplayString method to it. Then, the statement in line 8
 * uses the += operator to add the DisplayLength method to the delegate.
 * When line 11 executes, the DisplayString method is executed first, 
 * followed by the DisplayLength method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Here are some other points to keep in mind regading multicast 
 * delegates:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * * You can use the -= operator to remove a method from a multicast
 * deglegate. using the previously shown example, we could remove the
 * DisplayLength method from the StringOperation delegate with the 
 * statement:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * StringOperation -= DisplayLength;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * * If a multicast delegate references methods that retrun a value
 * (non-void methods), the delegate will return only the value that is 
 * returned from the last method that is executed. All other values 
 * returned in the invocation chain will be lost. In practice, it is 
 * best if multicast delegates reference only void methods.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 13.2 Anonymous Methods
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Concept: A delegate can refer to an anonymous method, which is a
 * method that has no name.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * An anonymous method is a method that has no name. In C#, delegates
 * give you the ability to create anonymous methods. For ex, suppose we 
 * have the following delegate type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate void WorksWithAString(string str);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Given this type declaration, the following code creates a delegte
 * that references an anonymous method:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * WorksWithAString Display = delegate(string str)
 * {
 *      MEssageBox.Show(str);
 * };
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This code creates a delegate named Displayed. The Display Delegate is
 * of the WorkWithAString type. The Display delegate referecnes an
 * anonymous method that has a string parameter, so when we call the
 * method, we must pass a string argument to it, as shown here:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Display("Calling the anonymous method.");
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This statement uses the Display delegate to call the anonymous method
 * , passing the string "Calling the anonymous method" as an argument.
 * The anonymous method displays the string in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Let's look at a complete application that demonstrates anonymous 
 * methods. Program 13-3 shows the Form1 code for the AnonymousMethod
 * application.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *In line we declare a deglegate type named IntCalculator that specifies
 * an int return type and two int parameters.
 * 
 * * In line 19 through 22 we create an IntCalculator deegate named Sum,
 * referencing an anonymous method that accepts two int argumets and 
 * returns their sum.
 * 
 * * In lines 24 through 27 we create an IntCalculator delegate named
 * Multiply, referencing an anonymous method that accepts two int
 * arguments and returns their product.
 * 
 * *In line 29 we call the method referenced by the Sum delegate,
 * passing the arguments 1 and 2, and assigning the return value
 * to the result variable. In line 30 we display the result variable
 * in a message box.
 * 
 * *In line 32 we call the method referecned by the Multiply delegate,
 * passing the arguments 2 and 4, and assigning the return value to
 * the result variable. in line 33 we display the return variable in a 
 * message box.
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-3 From1 code for the AnonymousMethod application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * namespace AnonymousMethof
 * {
 *      delegate int IntCalculator(int a, int b);
 *      
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          private void demoButton_Click(object sender, EventArgs e)
 *          {
 *              int result;
 *              
 *              IntCalculator Sum = delegate(int a, int b)
 *              {
 *               return a + b;   
 *              };
 *              
 *              IntCalculator Multiply = delegate(int a, int b)
 *              {
 *                  return a * b;
 *              };
 *              
 *              result = Sum(1,2);
 *              MessageBox.Show("1+2=" result.ToString());
 *              
 *              result = Multiply(1,4);
 *              MessageBox.Show("2*4=" result.ToString());
 *              
 *          }
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 13.3 Lambda Expressions
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Concept: A lambda expression is a concise expression that creates
 * an anonymous method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * A lambda expression is a shorrcut technique for writing an anonymous
 * methods. Here is general format of a simple lambda expression that
 * accepts one argument, and returns a value:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * parameter => expression
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In this general format, the lambda expression begins with a parameter
 * variable, followed by the lambda operator(=>), followed by an
 * expressionn that has a value. Here is an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * x => x * x
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The x that appears on the left side of the => operator is the name of
 * a parameter variable, and the expression x * X.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * For ex, suppose we have the following delegate type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate int IntOperation(int x);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The name of the delegate type is IntOperation, and it specifies a
 * return type of int, and one int parameter. Also, suppose that we want
 * to create a delegate of the IntOperation type that references a method
 * that returns the square of x. The following code shows how we can use
 * a lambda expression to create the delegate:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * IntOperation Square = x => x  * x;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * On the left side of the - operator, we declare an IntOperatrion delegate
 * named Square. One the right side of the = operator, we have a lambda
 * expression that creates an anonymous method with the following 
 * characterististics:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *    The parameter x that is used in the lambda expression represents
 * the argument that is passed to the method. We do not have to specify
 * the data type of x because the compiler will determine it. Because
 * the IntOperation delegate type specifies an int parameter, the x 
 * parameter in the lambda expression will automatically becomes an int.
 * 
 * *The expression x * x is the value that is returned from the method.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following table shows the lambda expression on the left, and 
 * equivalent code on the right that explicity creates an anonymous 
 * method. You can see that the lambda expression is must more concise 
 * than the anontmous method declaration.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Lambda Expression                    Anonymous Method
 * IntOperation Square = x => x * x;    IntOperation Square = delegate(int x)
 *                                      {
 *                                          return X * X;
 *                                      };
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 *  Let's look at a complete application that demonstrates the use of a
 *  lambda expression. Program 13-4 shows the Form1 code for the 
 *  LambdaDemo application.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *    In Line 6 we declare a delegate type named IntOperation that specifies
 * an int return type and an int parameter.
 * 
 * *In line 18 we declare an IntOperation delegate named Square, referencing
 * an anonymous method with an int parameter named x. The method returns the
 * valie of x * x/
 * 
 * *In line 20 we call the method referenced by the Square delegate, passing
 * the argument 5, and assigning the return value of the result variable.
 * In line 21 we display the result variable in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-4 Form1 code for the LamdaDemo application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using System;
 * 
 * 
 * name System.Windows.Forms;
 * 
 * namespace LambdaDemo
 * {
 *      delegate int IntOperations(int x);
 *      
 *      public partial class Form1 : Form
 *      {
 *      
 *      public partial class Form1 : Form
 *      {
 *          InitializeComponent();
 *      }
 *      
 *      ptivate void demoButton_Click(object sender, EventArgs e)
 *      {
 *          int result;
 *          IntOperation Square = x => x *x;
 *          
 *          result = Square(5);
 *          MessageBox.Show("5 squared as" + result.ToString());
 *      }
 *   }
 *}
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Lambda Expressions with Multiple Parameters
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * If a delegate type specifies multiple parameters any lambda expression 
 * that you use with the delegate must also have multiple poarameters. 
 * For ex, consider this delegate type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate void IntCalculator(int x, int b);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * To use more than one parameter in a lambda exression, simply write a 
 * comma-separated list are enclosed the list in parentheses. Here is 
 * an example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * IntCalulator Sum = (a,b) => a + b;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This lambda expression has tow parameters a and b. This expressionm returns the value a+b.
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Let's look at another application that demeonstrates lambda. Program
 * 13-5 shows the FOrm1 code for the lambdaDemo2 application. This 
 * application uses ;a,bda expression to perform the same operation as the
 * AnoymousMethod application shown in Program 13-3.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Line 6: we delclare a delegate type named IntCalcuator that specifies 
 * an int return type and two int paramters.
 * 
 * Line 18: we declare an INtCalculator delegate named Sum, referencing an
 * anonymous method with two int parameters named a and b. The method returns 
 * the sum of a and b.
 * 
 * line 19: we declare another IntCalculator delegate named Multiply,
 * referencing an anonymous method with two int parameters named a and b
 * . The method returns the sum of a and b.
 * 
 * line 21: we ccall the method referenced by the Sum delegate, passing
 * the arguments 1 and 2, and assigning the return value to the result 
 * varaible. In line 22 we display the result variable in a message box.
 * 
 * Line 24: we can call the method referenced by the Multiply delegate,
 * passing the arguments 2 and 4, and assigning the return value to 
 * the result variable. In line 25 we display the result variable in 
 * a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-5 Form1 code for the LamdbaDemo2 application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using System;
 * using System.Windows.Forms;
 * 
 * namespace LambdaDemo
 * {
 *      delegate int IntCalculator(int a, int b);
 *      
 *      public paratial class Fomr1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          private void domoButton_Click(object sender, AventArgs e)
 *          {
 *              int result;
 *              IntCalculator Sum = (a,b) => a * b;
 *              IntCalculator Multiply = (a,b) => a * b;
 *              
 *              result = Sum(1,2);
 *              MessageBox.Show("1+2 =", result.ToString());
 *              
 *              result = Multiply(2,4);
 *              MessageBox.Show("2+4 =", result.ToString());
 *          }
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Lambda Expressions with No Parameters
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * If a delegate type specifies no parameters any lambda expression that 
 * you use with the delegate must also have no paramters. For ex, consider
 * this delegate type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * deleage void TestMessage();
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Simply write a set of empty parentheses as the paramter list, as 
 * shown here:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * TestMessage Display = () => Message.Show("Testing, 1,2,3...");
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * When this lambda expression is invoked, it displays the string "Testing; 1,2,3..."
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * When this lambda expression is invoked, it displays the string 
 * "Testing, 1,2,3..." in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Lambda Expression that do Not Return a Value
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * If a delegate type specifies a void return type, any lambda expression
 * that you use with the deflegate will also be void. for, ex, consider this
 * delegare delegare type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate void Display(int x);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following statement creates a delegate of the DisplayInt type
 * named Display:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * DisplayInt Display = x => MessageBox.Show(x.ToString());
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This lambda expression has a paramter, x. When the expression is
 * invoked, it displays value of x in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Explicitly Declaring a Parmeter's Data Type
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * You do not have to specify the data type of a lambds expression's paramter
 * because the compiler is normally able to determine it from the delegate
 * type declaraion. However, C# compiler is notmally able to determine it 
 * from the delegate type declaration. However, C# allows you to
 * explicitly delcare the data type of a parameter, if you wish. For ex
 * , suppose we have the following delegate type declaaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate int IntOperation(int x);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The lambda expression in the follwoing explicitly declares the the data
 * type of x Parameter:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * IntOperation Square (int x) => x * x;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Note that the parameter declaration(on the left side of the => operator)
 * must be enclosed in parntheses. Here is another example, involving two
 * parameters:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate void IntCalculator(int a, int b);
 * IntCalculator Sum = (int a, int b) => a + b;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Using Multiple Statements in the Body of a Lambda Expression
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * You can write multiple statementsin the body of a lambda expression,
 * but if you do, you must enclose the statements in a set of curly 
 * braces, and you must write a return statement if the expression returns
 * a value. For ex, consider the delegate type declaration:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * delegate int IntOperation(int x);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The following statements creates a delegate of the IntOperation
 * type named TimesTwo:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * IntOperation TimesTwo = (x) => {
 *      int a = x * 2;
 *      return a;
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Accessing Outer Variables within a Lambda Expression
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * A lambda expression can access the local variables that are declared
 * in the method that contains the lambda expression, as long as those 
 * variables are in scope and have been assigned a value. The following
 * code demonstrates. Notice that the lambda expression in line 9 accesses
 * the local variable factor, which has been assigned the value 10.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * private void demoButton_Click(object sender, EventArgs e)
 * {
 *      int factor = 10;
 *      int result;
 *      
 *      // Create a delegate that multiples its
 *      // argument by factor.
 *      
 *      IntOperation Multipler = x +> x * factor;
 *      
 *      result = Multiplier(5);
 *      MessageBox.Show(result.ToString());
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Passing Lambda Expressions as Arguments
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * You can use a lambda expression anywhere that a compatible delegate
 * is exprected. For example, if you are calling a method that expects
 * a delegate to be passed as an argument, you can pass a compatible
 * lambda expression insteda. The code in Program 13-6 shows an example.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-6 Form1 code for the LamdaPAssing Demo application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using System;
 * using System.Windows.Forms;
 * 
 * namespace LambdaPassingDemo
 * {
 *      delegate void IntRefOperation(ref int x);
 *      
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          private void ArrayStepper(int[] array, intRefOperation op)
 *          {
 *              for(int index = 0; index < array.Length; intdex++)
 *              {
 *                  op(ref array[index]);
 *              }
 *          }
 *          
 *          private void demoButton_Click(object sender, EventArgs e)
 *          {
 *              // Create an int array with 4 elements.
 *              int[] numbers = {10,20,30,40};
 *              
 *              // Display the contents of the array.
 *              ArrayStepper(numbers, (ref int x) => MessageBox.Show(x.ToString()));
 *              
 *              // Set each array element to 0.
 *              ArrayStepper(numbers, (ref int x) => MessageBox.Show(x.TOString()));
 *          }
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Line 6: declares a delegate type named IntRefOperation that has an int
 * reference parameter.
 * 
 * Line 15: is a header for a method named ArrayStepper. The method has two
 * parameters: an int array named array, and an IntRefOperation delegate named
 * op.
 * 
 * Line 26: creates an int array named numbers, initialized with the values
 * 10,20,30,40.
 * 
 * Line 29: calls the ArrayStepper method passing as arguments, the number array
 * and the following lambnda expression:
 * 
 *      (ref int x) => MessageBox.Show(x.ToString());
 * 
 * Because the ArrayStepper method expects the second argument to be an 
 * IntRefOperation delegate,
 * this lambda expression is converted to an IntFerOperation delegate.
 * As a result, the ArrauStepper method displays each of the array elements
 * in a message box.
 * 
 * Line 32: calls the ArrayStepper method passing, as atguments, 
 * the numbers array and the following lambda expression:
 * 
 *      (ref int x) => x = 0
 * 
 * Because the ArrayStepper method expects the second argument to be an
 * IntRefOperation delegate, this lambda expression is converted an
 * IntRefOperation delegate,
 * this lambds expression is converted to an IntRefOperation delegate. 
 * As a result, the ArrayStepper method call sets each array elements to 0.
 * 
 * 
 * Line 35 perfroms the same operation as line 29: it displays each element of 
 * the array.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Using Lambda Expressions to Defin Class Methods
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Lambds expressions offer a quick and concise way to define simple 
 * methods within a class declaration. For example, look at the following 
 * SimpleMath class:
 * 
 * (This is soo cool)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * class SimpleMath
 * {
 *      public int Add(int a, int b) => a+b;
 *      public int Sub(int a, int b) => a-b;
 *      public int Mult(int a, int b) => a*b;
 *      public double Div(int a, int b) => (double) a/b;
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This class uses lambda expressions to define four methods named Add,
 * Sub, Mult, and Div.  Compare this code with the following class declarations
 * which uses regular method definitions:
 * 
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * class SimpleMath
 * {
 *      public int Add(int a, int b)
 *      {
 *          return a+b;
 *      }
 *       public int Add(int a, int b)
 *      {
 *          return a-b;
 *      }
 *       public int Add(int a, int b)
 *      {
 *          return a*b;
 *      }
 *       public int Add(int a, int b)
 *      {
 *          return (double)a/b;
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * As you can see, the first version of the class, which takes up only 
 * seven lines of code, is much more concise than the second version
 * which takes up 22 lines of code.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 13.4 Built-In Delegates: Action, Func, And Predicate
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Concept:
 * The .NET Framework provies delegates types that simplify the process
 * of creating certain types of delegates.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * So far you've learned that implements a delegate is a two-step process:
 * first you declare a delegate type, and then you create an intance of
 * the delegate. The .NET Framework provies some buil-in deletgate  types
 * that, in many situations, simplify the process of creating delegates.
 * We will look at three of these:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *Action-Invokes a boid method that accepts 0 to 16 arguments
 * 
 * *Func-Invokes a method that accepts 0 to 16 arguments and returns
 * a value
 * 
 * * Predicate-Invokes a method that accepts one argument and returns
 * a boolean value
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * When you create an Action, Func, or Predicate delegate, you do not have
 * to declare the delegate type because these types are already declared
 * in the .NET Freamework. Let's take a closer look at each type.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Action Delegates
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * You can use a Action delegate to invoke a void method that takes 0 to 
 * 16 arguments. To use a Action delegate, you do not have to declare the
 * delegate type because it is built into the .NET Framework. You simply
 * create an instance of the delegate. Here is an ex of how to use a lambda
 * expression to create an Action delegate that accepts no arguments:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Action DisplayTest = () => MessageBox.Show("Testing, 1,2,3...");
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * we could use an anonymous method to create an equivalent Action 
 * delegate, as shown here:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Action DisplayText = delegate()
 * {
 *  MessageBox.Show("Testing, 1,2,3...");
 * };
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * in both of these examples, the name of the delegate is DisplayTest.
 * When this delegate is invoked, it displays the string
 * "Testing,1,2,3..." in a message box. Regardless of whether we used a
 * lambda expression expression or an anonymous method to create the
 * delegate, we would invoke the delegate like this:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * DisplayTest();
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Let's look at a complete application that demonstrates this Action
 * delegate. Program 13-7 shows the Form1 code for the
 * ActionDelegateDemo1 application.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-7 Form1 code for the ActionDelegateDemo1 application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using System;
 * using System.Windows.Forms;
 * 
 * namespace ActionDelegateDemo1
 * {
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          private void demoButton_Click(object sender, EventArgs e)
 *          {
 *              // Create an Action delegate.
 *              Action DisplayTest = () =>
 *              MessageBox.Show("Testing, 1,2,3...");
 *              
 *              // Invoke the delegate.
 *              DisplayTest();
 *          }
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Passing Arguments to an Action Delegate
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * If you want to pass arguments to an Action delegate, you must specify
 * the data type of each of the delegate's parameters. Here is an example
 * of how to create an Action delegate that has one parameter, a string:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Action<string> ShowString = str = => MessageBox.Show(str);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In this statement, the delegate type is Action<string>. As previously
 * mentioned, this specifies that we are creating an Action delegate that 
 * has one parameter, a string. Notice that on the right of the = operator
 * , the lambda expression has a parameter named str. The data type of 
 * str parameter is string. This is illustrated in Figure 13-4.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 13-5 An Action Delegate with one parameter (anonymous method 
 * version) 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * As previously mentioned, an Action delegate can take 0 to 16 arguments
 * . Here is an example of using a lambda expression to create an Action
 * delegate that has two parameters:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Action<int,int> ShowSum = (a,b) =>
 * {
 *      int result = a + b;
 *      MessageBox.Show(result.ToString());
 * };
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In this statement, the delegate type is Action<int,int>. This
 * specifies that we are creating an Action delegate that has two 
 * parameters, both of which are int s. Notice that on the right side of 
 * the = operator, the lambda expression has two parameters named a and b
 * . Both of these parameters are int s.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Here is another example:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Action<string, int> ShowMessage = (str, x) =>
 * {
 *      MessageBox.Show(str + x.ToString());
 * };
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In this statement, the delegate type is Action<string, int>. This 
 * specifies that we are creating an Action delegate that has two
 * parameters: the first parameter is a string, and the second parameter
 * is an int. Notice that on the right side of the = operator, the 
 * lambda expression has two parameters named str and x. The str paramter 
 * is a string and the x parameter is an int.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * An Action delegate can have up to 16 parameters. You simply list
 * the data types of each paramter inside the breackets, int the order
 * that the parameters are declared. For example, the following code 
 * creates an Action deletgate with four parameters:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Action<int, double, string> ShowValues = (a,b,c) => {
 *      MessageBox.Show(a.ToString() + b.ToString() = c);
 * };
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Func Delegates
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * You can use a Func delegates to invoke a value-returning method that
 * takes 0 to 16 argruments. Here is an example of how to use a lambda
 * expression to create a Func delegate that accepts no arguments and 
 * returns a string:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Func<string> GetString = () => "This is a test.";
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * We could use an anonymous method to create an equivalent Action delegate
 * , as shown here:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Func<string> GetString = delegate()
 * {
 *      return "This is a test.";
 * };
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In both of these example, the name of the delegate is GetString. When
 * this delegate is invoked, it returns the string "This a test.". Here
 * is an example of how we might invoke the method:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * MessageBox.Show(GetString());
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This statement will display the string "This is a test." in a message 
 * box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Passing Arguments to a Func Delegate
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * If you want to pass arguments to a Func delegate, you must specify
 * the data type of each of the delegate's parameters as well as the 
 * data types of the value that is returned from the delegate. Here is
 * an example of how to create a Func delegate that returns a double,
 * and has one parameter, an int:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Func<int, double> half = x =? x * 0.5;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Inside the brackets, int is the data type of the parameter x and double
 * is the delegate's return type. This is illusted in Figure 13-6.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 13-6 A Func delegate with one parameter
 * (lambda expression version)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * We could use an anonymous method to create an equivalent
 * Func<int, double> delegate, as shown here:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Func<int, double> Half = delegate(int x)
 * {
 *      return x * 0.5;
 * };
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Notice that in the anonymous method we specify the parameter data 
 * type twice, as illustrated in Figure 13-7.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Figure 13-7 A Func delegate with one parameter(anonymous method version)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In both of these examples, the name of the delegate is Half. When this
 * delegate is invoked, it accepts an int argument and returns half of
 * the arguments's value as a double. Here is an example of how we might
 * invoke the delegate (assume result is a double that has already been 
 * declared):
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * result = Half(5);
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This statment will assign 2.5 to the result variable. Let's look at a 
 * complete application that demonstrates this Func delegate. Program
 * 12-8 shows the Form1 code for the FunctionDelegate Demo1 application.
 * When the application runs and the user clicks the demoButton control,
 * the statement in line 18 displays Half of 25 is 12.5 in a message box.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-8 Form1 code for the FuncDelegateDemo1 application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using System;
 * using System.Windows.Forms;
 * 
 * namespace FuncDelegateDemo1
 * {
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              initializeConponent();
 *          }
 *          
 *          private void demoButton_Click(object sender, EventArgs e)
 *          {
 *              Func<int, double> Half = x => x * 0.5;
 *              double result = Half(25);
 *              
 *              MessageBox.Show("Half of 25 is " + 
 *              result.ToString());
 *          }
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * A Func delegate can have up to 16 parameters. You simply list the data
 * types pf each parameter inside the brackets, in the order that the 
 * paeameters are delecared, folloed by the dlelgate's return type. For
 * ex. the following code creates a Func delegate that has two parameters 
 * (an int and a double) and returns a decimal:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Func<int, double, decimal> Sum = (a,b) => (decimal)a + (decimal)b;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In this code, the parameter a is an int, the parameter b is a double,
 * and the delegate's return type is decimal.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Predicate Delegates
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * You can use a Predicate delegate to invoke a method that accepts
 * one argumetns and returns a boolean value. Here is an example of a
 * Predicate delegate that has an int parameter:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Predicate<int> IsEvent = x => x % 2 ==0;
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * We could use an anonymous method to create an equivalent Predicate
 * deletgate, as shown here:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Predicate <int >IsEven = delegate(int x)
 * {
 *      return x % 2 == 0;
 * };
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In both of these examples, the name of the delegate is IsEven. It accepts
 * an int argument and returns true of the argument is an event number.
 * Otherwise it returns false. Here is an example of how we might invoke 
 * the method: 
 * 
 * (WOWOWOWOWOWOWO!?) its very c-like
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * if(IsEven(num))
 *      MessageBox.Show("The number is event.");
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This statement will display the string "The number is event." in a 
 * message box if the num variable contains an even number.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Table 13-1 List methods tha accepts delegates as arguments
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * |Method|Description
 * Exists:      Determines whether an element exists in the List
 * 
 *          The Exists method accepts a Predicate delegate as its argument.
 *          The Predicate must accept an argument of the same data type as 
 *          the List elements. The Exists method iterates over the List,
 *          passing each element as an argument to the Predicate. The Exists
 *          method returns true if the Predicate returned true for any of 
 *          the elements. Otherwise, the Exists method returns false.
 * 
 * Find:        Finds the first element for which a condition is true
 *          The Find method accepts a Predicate delegate as its argument.
 *          The Predicate must accept an argument of the same data type as the 
 *          List elements. The Find method returns the first element  that, when 
 *          passed to the Predicate, causes the PRedicate to return true.
 *          
 * FindAll:     Finds all the elements for which a condition is true
 *          The FindsAll method accepts a Predicate delegate as its argumet.
 *          The Predicate must accept an argument of the same data type as the
 *          List elements. The FindAll method returns a List of all the 
 *          elements that, when passed to to the Predicate, causes the
 *          Predicate to return true.
 *          
 * FindIndex:   Finds the index of the first element for which a 
 *              condition is true
 *          The FindIndex method accepts a PRedicate delegate as its
 *          argument. The Predicate must accept an argument of the same
 *          data type as the List elements. The FindIndex method returns
 *          the index of the first element that, when passed to the 
 *          Predicate, causes the Predicate to return true.
 * 
 * FindLast:    Finds the last element for which a condition is true
 *          The FindLast method acceptsa Predicate delegate as its argument.
 *          The Predicate must accept an argument of the same data type as the 
 *          List elements. The FindList method returns the last element that,
 *          when passed to the Predicate, causes the Prdicate to return true.
 *          
 * FindLastIndex:Finds the index of the last element for which a
 *               condition is true
 *          The FindLastIndex method accepts a Predicate delegate as its
 *          argument. The Predicate must accept an argument of the same data
 *          type as the List elements. The FindLastIndex method returns the
 *          index of the last element that, when passed to the Predicate,
 *          causes the Predicate to retun true.
 *          
 * ForEach:     Performs an action on each element of the List
 *          The ForEach method accepts an Action delegate as its argumet.
 *          The ACtion delegate must accept one argument. The argument's
 *          data type must match the data type of the List elements. The
 *          method iterates over the List, passing each element as an
 *          argument to delegate.
 *          
 * RemoveAll:   Removes all elements for which a condition is true
 *          The RemoveAll method accepts a PRedicate delegate as its
 *          argument. The Predicate  must accept an argument of the same
 *          data type as the List elements. The removeAll method removes
 *          all the elements that, when passed to the Predicate, causes
 *          the Predicate to return true.
 * 
 * TrueForAll:  Determines whether a condition is true for all elements in
 *              the List
 *          The TrueForAll method accepts a PRedicate delegate as its argument.
 *          The PRedicate must accept an argument of the same data type as the
 *          List elements. The TryeForAll method returns true if all the List
 *          elements, when passed to the Predicate, causes the Predicate to 
 *          return true. Otherwise, the trueForAll method returns false.
 *          
 *          
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * The methods listed in Table 13-1 are straightforward, but let's look 
 * at a couple of them. First the ForEach method. Here is the general
 * format:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * listName.ForEach(ActionDelegate)
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * In the general format, listName is the name of a List. The ActionDelegate
 * argument in an Action delegate that accepts one argument. The ForEAch
 * method iterates over the entier List, passing each element as an 
 * argument to ActionDelegate. Let's look at a complete application that
 * demonstrates the ForEach method. Program 13-9 shows the Form1 code for 
 * the ForEAchDemo application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-9 Form1 code for the ForEachDemo1 application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using System;
 * using System.Collections.Generic;
 * using System.Windows.Forms;
 * 
 * namespace ForEachDemo1
 * {
 *      public partial class Form1 : Form
 *      {
 *          public Form1()
 *          {
 *              InitializeComponent();
 *          }
 *          
 *          private void demoButton_Click(opject sebder, EventArgs e)
 *          {
 *              // Create a list of integers.
 *              List<int>numbers = new List<int>(){1,2,3,4,5};
 *              
 *              //Create an Action delegate that displays an integer.
 *              Action<int> Display = X => MessageBox.Show(x.ToString());
 *              
 *                  // Invoke the Display delegate for each element of the List.
 *                  numbers.ForEach(Display);
 *          }
 *      }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * *The code in line 17 creates a List of integers named numbers, and 
 * initializes the List with the values 1,2,3,4 and 5.
 * 
 * *Line 20 creates an Actiondelegate named Display with an int parameter
 * named x. WHen the deleate is invoked, the x parmewther's values is 
 * displayed in a messages box.
 * 
 * *Line 23 class the numbers List's ForEach method, passing the Display
 * delegate as an argument. The ForEAch method iterates over the List, passihng
 * each element as an argument to the Display delegate. As a result, five message
 * bpxes will appear(one after the other), with each showning the value of the
 * element.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Remember, if a method accepts a delegate as an argument, you can pass
 * a compatiable lambda expresison to the method. We can simplify the
 * code in Program 13-9 by passing a lambda expression to the List's ForEAch
 * method. This allows is to eliminate the delegate declaration that appears 
 * in line 20. PRogram 13-10 shows the revised code.
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * Program 13-10 Form1 code for the ForEAchDemo2 application
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * using System;
 * using System.Collections.Generic;
 * using System.Windows.Forms;
 * 
 * namespace ForEachDemo2
 * {
 *  public partial Form1 : Form
 *  {
 *      public Form1()  
 *      {
 *      IntitakizeComponent();
 *      }   
 *  
 *  private void demoButton_Click(object sender,
 *  EventArgs e)
 *  {
 *      //Create a list of integers.
 *      List<int> numbers = new List<int>(){1,2,3,4,5};
 *  
 *      // Display each element of the List.
 *      numbers.ForEach(x => MessageBox.Show(x.ToString()))
 *  }
 *  }
 * }
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * This program works the same as the code previously shown in Program 13-9.
 * In line 20 we pass the following lambda expression as an argument to 
 * the ForEach method:
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * x => MessageBox.Show(x.ToString());
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 * /////////////////////////////////////////////////////////////////////
 * 
 */